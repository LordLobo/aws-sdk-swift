//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore

/**
Client object for interacting with AWS SSM service.

AWS Systems Manager AWS Systems Manager is a collection of capabilities that helps you automate management tasks such as collecting system inventory, applying operating system (OS) patches, automating the creation of Amazon Machine Images (AMIs), and configuring operating systems (OSs) and applications at scale. Systems Manager lets you remotely and securely manage the configuration of your managed instances. A managed instance is any Amazon Elastic Compute Cloud instance (EC2 instance), or any on-premises server or virtual machine (VM) in your hybrid environment that has been configured for Systems Manager. This reference is intended to be used with the AWS Systems Manager User Guide. To get started, verify prerequisites and configure managed instances. For more information, see Setting up AWS Systems Manager in the AWS Systems Manager User Guide. For information about other API actions you can perform on EC2 instances, see the Amazon EC2 API Reference. For information about how to use a Query API, see Making API requests. 
*/
public struct SSM: AWSService {

    //MARK: Member variables

    public let client: AWSClient
    public let config: AWSServiceConfig
    public let context: AWSServiceContext

    //MARK: Initialization

    /// Initialize the SSM client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - timeout: Timeout value for HTTP requests
    public init(
        client: AWSClient,
        region: AWSSDKSwiftCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        timeout: TimeAmount? = nil
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AmazonSSM",
            service: "ssm",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2014-11-06",
            endpoint: endpoint,
            possibleErrorTypes: [SSMErrorType.self]        )
        self.context = .init(timeout: timeout ?? .seconds(20))
    }
    
    /// create copy of service with new context
    public func withNewContext(_ process: (AWSServiceContext) -> AWSServiceContext) -> Self {
        return Self(client: self.client, config: self.config, context: process(self.context))
    }
    
    //MARK: API Calls

    ///  Adds or overwrites one or more tags for the specified resource. Tags are metadata that you can assign to your documents, managed instances, maintenance windows, Parameter Store parameters, and patch baselines. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. For example, you could define a set of tags for your account's managed instances that helps you track each instance's owner and stack level. For example: Key=Owner and Value=DbAdmin, SysAdmin, or Dev. Or Key=Stack and Value=Production, Pre-Production, or Test. Each resource can have a maximum of 50 tags.  We recommend that you devise a set of tag keys that meets your needs for each resource type. Using a consistent set of tag keys makes it easier for you to manage your resources. You can search and filter the resources based on the tags you add. Tags don't have any semantic meaning to and are interpreted strictly as a string of characters.  For more information about using tags with EC2 instances, see Tagging your Amazon EC2 resources in the Amazon EC2 User Guide.
    public func addTagsToResource(_ input: AddTagsToResourceRequest) -> EventLoopFuture<AddTagsToResourceResult> {
        return client.execute(operation: "AddTagsToResource", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Attempts to cancel the command specified by the Command ID. There is no guarantee that the command will be terminated and the underlying process stopped.
    public func cancelCommand(_ input: CancelCommandRequest) -> EventLoopFuture<CancelCommandResult> {
        return client.execute(operation: "CancelCommand", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Stops a maintenance window execution that is already in progress and cancels any tasks in the window that have not already starting running. (Tasks already in progress will continue to completion.)
    public func cancelMaintenanceWindowExecution(_ input: CancelMaintenanceWindowExecutionRequest) -> EventLoopFuture<CancelMaintenanceWindowExecutionResult> {
        return client.execute(operation: "CancelMaintenanceWindowExecution", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Generates an activation code and activation ID you can use to register your on-premises server or virtual machine (VM) with Systems Manager. Registering these machines with Systems Manager makes it possible to manage them using Systems Manager capabilities. You use the activation code and ID when installing SSM Agent on machines in your hybrid environment. For more information about requirements for managing on-premises instances and VMs using Systems Manager, see Setting up AWS Systems Manager for hybrid environments in the AWS Systems Manager User Guide.   On-premises servers or VMs that are registered with Systems Manager and EC2 instances that you manage with Systems Manager are all called managed instances. 
    public func createActivation(_ input: CreateActivationRequest) -> EventLoopFuture<CreateActivationResult> {
        return client.execute(operation: "CreateActivation", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  A State Manager association defines the state that you want to maintain on your instances. For example, an association can specify that anti-virus software must be installed and running on your instances, or that certain ports must be closed. For static targets, the association specifies a schedule for when the configuration is reapplied. For dynamic targets, such as an AWS Resource Group or an AWS Autoscaling Group, State Manager applies the configuration when new instances are added to the group. The association also specifies actions to take when applying the configuration. For example, an association for anti-virus software might run once a day. If the software is not installed, then State Manager installs it. If the software is installed, but the service is not running, then the association might instruct State Manager to start the service. 
    public func createAssociation(_ input: CreateAssociationRequest) -> EventLoopFuture<CreateAssociationResult> {
        return client.execute(operation: "CreateAssociation", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Associates the specified Systems Manager document with the specified instances or targets. When you associate a document with one or more instances using instance IDs or tags, SSM Agent running on the instance processes the document and configures the instance as specified. If you associate a document with an instance that already has an associated document, the system returns the AssociationAlreadyExists exception.
    public func createAssociationBatch(_ input: CreateAssociationBatchRequest) -> EventLoopFuture<CreateAssociationBatchResult> {
        return client.execute(operation: "CreateAssociationBatch", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a Systems Manager (SSM) document. An SSM document defines the actions that Systems Manager performs on your managed instances. For more information about SSM documents, including information about supported schemas, features, and syntax, see AWS Systems Manager Documents in the AWS Systems Manager User Guide.
    public func createDocument(_ input: CreateDocumentRequest) -> EventLoopFuture<CreateDocumentResult> {
        return client.execute(operation: "CreateDocument", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a new maintenance window.  The value you specify for Duration determines the specific end time for the maintenance window based on the time it begins. No maintenance window tasks are permitted to start after the resulting endtime minus the number of hours you specify for Cutoff. For example, if the maintenance window starts at 3 PM, the duration is three hours, and the value you specify for Cutoff is one hour, no maintenance window tasks can start after 5 PM. 
    public func createMaintenanceWindow(_ input: CreateMaintenanceWindowRequest) -> EventLoopFuture<CreateMaintenanceWindowResult> {
        return client.execute(operation: "CreateMaintenanceWindow", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a new OpsItem. You must have permission in AWS Identity and Access Management (IAM) to create a new OpsItem. For more information, see Getting started with OpsCenter in the AWS Systems Manager User Guide. Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see AWS Systems Manager OpsCenter in the AWS Systems Manager User Guide. 
    public func createOpsItem(_ input: CreateOpsItemRequest) -> EventLoopFuture<CreateOpsItemResponse> {
        return client.execute(operation: "CreateOpsItem", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a patch baseline.  For information about valid key and value pairs in PatchFilters for each supported operating system type, see PatchFilter. 
    public func createPatchBaseline(_ input: CreatePatchBaselineRequest) -> EventLoopFuture<CreatePatchBaselineResult> {
        return client.execute(operation: "CreatePatchBaseline", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  A resource data sync helps you view data from multiple sources in a single location. Systems Manager offers two types of resource data sync: SyncToDestination and SyncFromSource. You can configure Systems Manager Inventory to use the SyncToDestination type to synchronize Inventory data from multiple AWS Regions to a single S3 bucket. For more information, see Configuring Resource Data Sync for Inventory in the AWS Systems Manager User Guide. You can configure Systems Manager Explorer to use the SyncFromSource type to synchronize operational work items (OpsItems) and operational data (OpsData) from multiple AWS Regions to a single S3 bucket. This type can synchronize OpsItems and OpsData from multiple AWS accounts and Regions or EntireOrganization by using AWS Organizations. For more information, see Setting up Systems Manager Explorer to display data from multiple accounts and Regions in the AWS Systems Manager User Guide. A resource data sync is an asynchronous operation that returns immediately. After a successful initial sync is completed, the system continuously syncs data. To check the status of a sync, use the ListResourceDataSync.  By default, data is not encrypted in Amazon S3. We strongly recommend that you enable encryption in Amazon S3 to ensure secure data storage. We also recommend that you secure access to the Amazon S3 bucket by creating a restrictive bucket policy.  
    public func createResourceDataSync(_ input: CreateResourceDataSyncRequest) -> EventLoopFuture<CreateResourceDataSyncResult> {
        return client.execute(operation: "CreateResourceDataSync", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Deletes an activation. You are not required to delete an activation. If you delete an activation, you can no longer use it to register additional managed instances. Deleting an activation does not de-register managed instances. You must manually de-register managed instances.
    public func deleteActivation(_ input: DeleteActivationRequest) -> EventLoopFuture<DeleteActivationResult> {
        return client.execute(operation: "DeleteActivation", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Disassociates the specified Systems Manager document from the specified instance. When you disassociate a document from an instance, it does not change the configuration of the instance. To change the configuration state of an instance after you disassociate a document, you must create a new document with the desired configuration and associate it with the instance.
    public func deleteAssociation(_ input: DeleteAssociationRequest) -> EventLoopFuture<DeleteAssociationResult> {
        return client.execute(operation: "DeleteAssociation", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the Systems Manager document and all instance associations to the document. Before you delete the document, we recommend that you use DeleteAssociation to disassociate all instances that are associated with the document.
    public func deleteDocument(_ input: DeleteDocumentRequest) -> EventLoopFuture<DeleteDocumentResult> {
        return client.execute(operation: "DeleteDocument", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Delete a custom inventory type, or the data associated with a custom Inventory type. Deleting a custom inventory type is also referred to as deleting a custom inventory schema.
    public func deleteInventory(_ input: DeleteInventoryRequest) -> EventLoopFuture<DeleteInventoryResult> {
        return client.execute(operation: "DeleteInventory", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Deletes a maintenance window.
    public func deleteMaintenanceWindow(_ input: DeleteMaintenanceWindowRequest) -> EventLoopFuture<DeleteMaintenanceWindowResult> {
        return client.execute(operation: "DeleteMaintenanceWindow", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Delete a parameter from the system.
    public func deleteParameter(_ input: DeleteParameterRequest) -> EventLoopFuture<DeleteParameterResult> {
        return client.execute(operation: "DeleteParameter", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Delete a list of parameters.
    public func deleteParameters(_ input: DeleteParametersRequest) -> EventLoopFuture<DeleteParametersResult> {
        return client.execute(operation: "DeleteParameters", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Deletes a patch baseline.
    public func deletePatchBaseline(_ input: DeletePatchBaselineRequest) -> EventLoopFuture<DeletePatchBaselineResult> {
        return client.execute(operation: "DeletePatchBaseline", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Deletes a Resource Data Sync configuration. After the configuration is deleted, changes to data on managed instances are no longer synced to or from the target. Deleting a sync configuration does not delete data.
    public func deleteResourceDataSync(_ input: DeleteResourceDataSyncRequest) -> EventLoopFuture<DeleteResourceDataSyncResult> {
        return client.execute(operation: "DeleteResourceDataSync", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Removes the server or virtual machine from the list of registered servers. You can reregister the instance again at any time. If you don't plan to use Run Command on the server, we suggest uninstalling SSM Agent first.
    public func deregisterManagedInstance(_ input: DeregisterManagedInstanceRequest) -> EventLoopFuture<DeregisterManagedInstanceResult> {
        return client.execute(operation: "DeregisterManagedInstance", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Removes a patch group from a patch baseline.
    public func deregisterPatchBaselineForPatchGroup(_ input: DeregisterPatchBaselineForPatchGroupRequest) -> EventLoopFuture<DeregisterPatchBaselineForPatchGroupResult> {
        return client.execute(operation: "DeregisterPatchBaselineForPatchGroup", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Removes a target from a maintenance window.
    public func deregisterTargetFromMaintenanceWindow(_ input: DeregisterTargetFromMaintenanceWindowRequest) -> EventLoopFuture<DeregisterTargetFromMaintenanceWindowResult> {
        return client.execute(operation: "DeregisterTargetFromMaintenanceWindow", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Removes a task from a maintenance window.
    public func deregisterTaskFromMaintenanceWindow(_ input: DeregisterTaskFromMaintenanceWindowRequest) -> EventLoopFuture<DeregisterTaskFromMaintenanceWindowResult> {
        return client.execute(operation: "DeregisterTaskFromMaintenanceWindow", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Describes details about the activation, such as the date and time the activation was created, its expiration date, the IAM role assigned to the instances in the activation, and the number of instances registered by using this activation.
    public func describeActivations(_ input: DescribeActivationsRequest) -> EventLoopFuture<DescribeActivationsResult> {
        return client.execute(operation: "DescribeActivations", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Describes the association for the specified target or instance. If you created the association by using the Targets parameter, then you must retrieve the association by using the association ID. If you created the association by specifying an instance ID and a Systems Manager document, then you retrieve the association by specifying the document name and the instance ID. 
    public func describeAssociation(_ input: DescribeAssociationRequest) -> EventLoopFuture<DescribeAssociationResult> {
        return client.execute(operation: "DescribeAssociation", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Use this API action to view information about a specific execution of a specific association.
    public func describeAssociationExecutionTargets(_ input: DescribeAssociationExecutionTargetsRequest) -> EventLoopFuture<DescribeAssociationExecutionTargetsResult> {
        return client.execute(operation: "DescribeAssociationExecutionTargets", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Use this API action to view all executions for a specific association ID. 
    public func describeAssociationExecutions(_ input: DescribeAssociationExecutionsRequest) -> EventLoopFuture<DescribeAssociationExecutionsResult> {
        return client.execute(operation: "DescribeAssociationExecutions", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Provides details about all active and terminated Automation executions.
    public func describeAutomationExecutions(_ input: DescribeAutomationExecutionsRequest) -> EventLoopFuture<DescribeAutomationExecutionsResult> {
        return client.execute(operation: "DescribeAutomationExecutions", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Information about all active and terminated step executions in an Automation workflow.
    public func describeAutomationStepExecutions(_ input: DescribeAutomationStepExecutionsRequest) -> EventLoopFuture<DescribeAutomationStepExecutionsResult> {
        return client.execute(operation: "DescribeAutomationStepExecutions", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Lists all patches eligible to be included in a patch baseline.
    public func describeAvailablePatches(_ input: DescribeAvailablePatchesRequest) -> EventLoopFuture<DescribeAvailablePatchesResult> {
        return client.execute(operation: "DescribeAvailablePatches", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Describes the specified Systems Manager document.
    public func describeDocument(_ input: DescribeDocumentRequest) -> EventLoopFuture<DescribeDocumentResult> {
        return client.execute(operation: "DescribeDocument", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Describes the permissions for a Systems Manager document. If you created the document, you are the owner. If a document is shared, it can either be shared privately (by specifying a user's AWS account ID) or publicly (All). 
    public func describeDocumentPermission(_ input: DescribeDocumentPermissionRequest) -> EventLoopFuture<DescribeDocumentPermissionResponse> {
        return client.execute(operation: "DescribeDocumentPermission", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  All associations for the instance(s).
    public func describeEffectiveInstanceAssociations(_ input: DescribeEffectiveInstanceAssociationsRequest) -> EventLoopFuture<DescribeEffectiveInstanceAssociationsResult> {
        return client.execute(operation: "DescribeEffectiveInstanceAssociations", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the current effective patches (the patch and the approval state) for the specified patch baseline. Note that this API applies only to Windows patch baselines.
    public func describeEffectivePatchesForPatchBaseline(_ input: DescribeEffectivePatchesForPatchBaselineRequest) -> EventLoopFuture<DescribeEffectivePatchesForPatchBaselineResult> {
        return client.execute(operation: "DescribeEffectivePatchesForPatchBaseline", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  The status of the associations for the instance(s).
    public func describeInstanceAssociationsStatus(_ input: DescribeInstanceAssociationsStatusRequest) -> EventLoopFuture<DescribeInstanceAssociationsStatusResult> {
        return client.execute(operation: "DescribeInstanceAssociationsStatus", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Describes one or more of your instances, including information about the operating system platform, the version of SSM Agent installed on the instance, instance status, and so on. If you specify one or more instance IDs, it returns information for those instances. If you do not specify instance IDs, it returns information for all your instances. If you specify an instance ID that is not valid or an instance that you do not own, you receive an error.  The IamRole field for this API action is the Amazon Identity and Access Management (IAM) role assigned to on-premises instances. This call does not return the IAM role for EC2 instances. 
    public func describeInstanceInformation(_ input: DescribeInstanceInformationRequest) -> EventLoopFuture<DescribeInstanceInformationResult> {
        return client.execute(operation: "DescribeInstanceInformation", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the high-level patch state of one or more instances.
    public func describeInstancePatchStates(_ input: DescribeInstancePatchStatesRequest) -> EventLoopFuture<DescribeInstancePatchStatesResult> {
        return client.execute(operation: "DescribeInstancePatchStates", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the high-level patch state for the instances in the specified patch group.
    public func describeInstancePatchStatesForPatchGroup(_ input: DescribeInstancePatchStatesForPatchGroupRequest) -> EventLoopFuture<DescribeInstancePatchStatesForPatchGroupResult> {
        return client.execute(operation: "DescribeInstancePatchStatesForPatchGroup", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves information about the patches on the specified instance and their state relative to the patch baseline being used for the instance.
    public func describeInstancePatches(_ input: DescribeInstancePatchesRequest) -> EventLoopFuture<DescribeInstancePatchesResult> {
        return client.execute(operation: "DescribeInstancePatches", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Describes a specific delete inventory operation.
    public func describeInventoryDeletions(_ input: DescribeInventoryDeletionsRequest) -> EventLoopFuture<DescribeInventoryDeletionsResult> {
        return client.execute(operation: "DescribeInventoryDeletions", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the individual task executions (one per target) for a particular task run as part of a maintenance window execution.
    public func describeMaintenanceWindowExecutionTaskInvocations(_ input: DescribeMaintenanceWindowExecutionTaskInvocationsRequest) -> EventLoopFuture<DescribeMaintenanceWindowExecutionTaskInvocationsResult> {
        return client.execute(operation: "DescribeMaintenanceWindowExecutionTaskInvocations", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  For a given maintenance window execution, lists the tasks that were run.
    public func describeMaintenanceWindowExecutionTasks(_ input: DescribeMaintenanceWindowExecutionTasksRequest) -> EventLoopFuture<DescribeMaintenanceWindowExecutionTasksResult> {
        return client.execute(operation: "DescribeMaintenanceWindowExecutionTasks", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Lists the executions of a maintenance window. This includes information about when the maintenance window was scheduled to be active, and information about tasks registered and run with the maintenance window.
    public func describeMaintenanceWindowExecutions(_ input: DescribeMaintenanceWindowExecutionsRequest) -> EventLoopFuture<DescribeMaintenanceWindowExecutionsResult> {
        return client.execute(operation: "DescribeMaintenanceWindowExecutions", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves information about upcoming executions of a maintenance window.
    public func describeMaintenanceWindowSchedule(_ input: DescribeMaintenanceWindowScheduleRequest) -> EventLoopFuture<DescribeMaintenanceWindowScheduleResult> {
        return client.execute(operation: "DescribeMaintenanceWindowSchedule", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Lists the targets registered with the maintenance window.
    public func describeMaintenanceWindowTargets(_ input: DescribeMaintenanceWindowTargetsRequest) -> EventLoopFuture<DescribeMaintenanceWindowTargetsResult> {
        return client.execute(operation: "DescribeMaintenanceWindowTargets", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Lists the tasks in a maintenance window.
    public func describeMaintenanceWindowTasks(_ input: DescribeMaintenanceWindowTasksRequest) -> EventLoopFuture<DescribeMaintenanceWindowTasksResult> {
        return client.execute(operation: "DescribeMaintenanceWindowTasks", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the maintenance windows in an AWS account.
    public func describeMaintenanceWindows(_ input: DescribeMaintenanceWindowsRequest) -> EventLoopFuture<DescribeMaintenanceWindowsResult> {
        return client.execute(operation: "DescribeMaintenanceWindows", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves information about the maintenance window targets or tasks that an instance is associated with.
    public func describeMaintenanceWindowsForTarget(_ input: DescribeMaintenanceWindowsForTargetRequest) -> EventLoopFuture<DescribeMaintenanceWindowsForTargetResult> {
        return client.execute(operation: "DescribeMaintenanceWindowsForTarget", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Query a set of OpsItems. You must have permission in AWS Identity and Access Management (IAM) to query a list of OpsItems. For more information, see Getting started with OpsCenter in the AWS Systems Manager User Guide. Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see AWS Systems Manager OpsCenter in the AWS Systems Manager User Guide. 
    public func describeOpsItems(_ input: DescribeOpsItemsRequest) -> EventLoopFuture<DescribeOpsItemsResponse> {
        return client.execute(operation: "DescribeOpsItems", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Get information about a parameter.  Request results are returned on a best-effort basis. If you specify MaxResults in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of MaxResults. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a NextToken. You can specify the NextToken in a subsequent call to get the next set of results. 
    public func describeParameters(_ input: DescribeParametersRequest) -> EventLoopFuture<DescribeParametersResult> {
        return client.execute(operation: "DescribeParameters", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Lists the patch baselines in your AWS account.
    public func describePatchBaselines(_ input: DescribePatchBaselinesRequest) -> EventLoopFuture<DescribePatchBaselinesResult> {
        return client.execute(operation: "DescribePatchBaselines", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Returns high-level aggregated patch compliance state for a patch group.
    public func describePatchGroupState(_ input: DescribePatchGroupStateRequest) -> EventLoopFuture<DescribePatchGroupStateResult> {
        return client.execute(operation: "DescribePatchGroupState", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Lists all patch groups that have been registered with patch baselines.
    public func describePatchGroups(_ input: DescribePatchGroupsRequest) -> EventLoopFuture<DescribePatchGroupsResult> {
        return client.execute(operation: "DescribePatchGroups", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Lists the properties of available patches organized by product, product family, classification, severity, and other properties of available patches. You can use the reported properties in the filters you specify in requests for actions such as CreatePatchBaseline, UpdatePatchBaseline, DescribeAvailablePatches, and DescribePatchBaselines. The following section lists the properties that can be used in filters for each major operating system type:  WINDOWS  Valid properties: PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, MSRC_SEVERITY  AMAZON_LINUX  Valid properties: PRODUCT, CLASSIFICATION, SEVERITY  AMAZON_LINUX_2  Valid properties: PRODUCT, CLASSIFICATION, SEVERITY  UBUNTU   Valid properties: PRODUCT, PRIORITY  REDHAT_ENTERPRISE_LINUX  Valid properties: PRODUCT, CLASSIFICATION, SEVERITY  SUSE  Valid properties: PRODUCT, CLASSIFICATION, SEVERITY  CENTOS  Valid properties: PRODUCT, CLASSIFICATION, SEVERITY  
    public func describePatchProperties(_ input: DescribePatchPropertiesRequest) -> EventLoopFuture<DescribePatchPropertiesResult> {
        return client.execute(operation: "DescribePatchProperties", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves a list of all active sessions (both connected and disconnected) or terminated sessions from the past 30 days.
    public func describeSessions(_ input: DescribeSessionsRequest) -> EventLoopFuture<DescribeSessionsResponse> {
        return client.execute(operation: "DescribeSessions", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Get detailed information about a particular Automation execution.
    public func getAutomationExecution(_ input: GetAutomationExecutionRequest) -> EventLoopFuture<GetAutomationExecutionResult> {
        return client.execute(operation: "GetAutomationExecution", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Gets the state of the AWS Systems Manager Change Calendar at an optional, specified time. If you specify a time, GetCalendarState returns the state of the calendar at a specific time, and returns the next time that the Change Calendar state will transition. If you do not specify a time, GetCalendarState assumes the current time. Change Calendar entries have two possible states: OPEN or CLOSED. For more information about Systems Manager Change Calendar, see AWS Systems Manager Change Calendar in the AWS Systems Manager User Guide.
    public func getCalendarState(_ input: GetCalendarStateRequest) -> EventLoopFuture<GetCalendarStateResponse> {
        return client.execute(operation: "GetCalendarState", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Returns detailed information about command execution for an invocation or plugin. 
    public func getCommandInvocation(_ input: GetCommandInvocationRequest) -> EventLoopFuture<GetCommandInvocationResult> {
        return client.execute(operation: "GetCommandInvocation", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the Session Manager connection status for an instance to determine whether it is running and ready to receive Session Manager connections.
    public func getConnectionStatus(_ input: GetConnectionStatusRequest) -> EventLoopFuture<GetConnectionStatusResponse> {
        return client.execute(operation: "GetConnectionStatus", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the default patch baseline. Note that Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system. If you do not specify an operating system value, the default patch baseline for Windows is returned.
    public func getDefaultPatchBaseline(_ input: GetDefaultPatchBaselineRequest) -> EventLoopFuture<GetDefaultPatchBaselineResult> {
        return client.execute(operation: "GetDefaultPatchBaseline", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the current snapshot for the patch baseline the instance uses. This API is primarily used by the AWS-RunPatchBaseline Systems Manager document. 
    public func getDeployablePatchSnapshotForInstance(_ input: GetDeployablePatchSnapshotForInstanceRequest) -> EventLoopFuture<GetDeployablePatchSnapshotForInstanceResult> {
        return client.execute(operation: "GetDeployablePatchSnapshotForInstance", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Gets the contents of the specified Systems Manager document.
    public func getDocument(_ input: GetDocumentRequest) -> EventLoopFuture<GetDocumentResult> {
        return client.execute(operation: "GetDocument", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Query inventory information.
    public func getInventory(_ input: GetInventoryRequest) -> EventLoopFuture<GetInventoryResult> {
        return client.execute(operation: "GetInventory", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Return a list of inventory type names for the account, or return a list of attribute names for a specific Inventory item type.
    public func getInventorySchema(_ input: GetInventorySchemaRequest) -> EventLoopFuture<GetInventorySchemaResult> {
        return client.execute(operation: "GetInventorySchema", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves a maintenance window.
    public func getMaintenanceWindow(_ input: GetMaintenanceWindowRequest) -> EventLoopFuture<GetMaintenanceWindowResult> {
        return client.execute(operation: "GetMaintenanceWindow", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves details about a specific a maintenance window execution.
    public func getMaintenanceWindowExecution(_ input: GetMaintenanceWindowExecutionRequest) -> EventLoopFuture<GetMaintenanceWindowExecutionResult> {
        return client.execute(operation: "GetMaintenanceWindowExecution", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the details about a specific task run as part of a maintenance window execution.
    public func getMaintenanceWindowExecutionTask(_ input: GetMaintenanceWindowExecutionTaskRequest) -> EventLoopFuture<GetMaintenanceWindowExecutionTaskResult> {
        return client.execute(operation: "GetMaintenanceWindowExecutionTask", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves information about a specific task running on a specific target.
    public func getMaintenanceWindowExecutionTaskInvocation(_ input: GetMaintenanceWindowExecutionTaskInvocationRequest) -> EventLoopFuture<GetMaintenanceWindowExecutionTaskInvocationResult> {
        return client.execute(operation: "GetMaintenanceWindowExecutionTaskInvocation", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Lists the tasks in a maintenance window.
    public func getMaintenanceWindowTask(_ input: GetMaintenanceWindowTaskRequest) -> EventLoopFuture<GetMaintenanceWindowTaskResult> {
        return client.execute(operation: "GetMaintenanceWindowTask", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Get information about an OpsItem by using the ID. You must have permission in AWS Identity and Access Management (IAM) to view information about an OpsItem. For more information, see Getting started with OpsCenter in the AWS Systems Manager User Guide. Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see AWS Systems Manager OpsCenter in the AWS Systems Manager User Guide. 
    public func getOpsItem(_ input: GetOpsItemRequest) -> EventLoopFuture<GetOpsItemResponse> {
        return client.execute(operation: "GetOpsItem", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  View a summary of OpsItems based on specified filters and aggregators.
    public func getOpsSummary(_ input: GetOpsSummaryRequest) -> EventLoopFuture<GetOpsSummaryResult> {
        return client.execute(operation: "GetOpsSummary", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Get information about a parameter by using the parameter name. Don't confuse this API action with the GetParameters API action.
    public func getParameter(_ input: GetParameterRequest) -> EventLoopFuture<GetParameterResult> {
        return client.execute(operation: "GetParameter", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Query a list of all parameters used by the AWS account.
    public func getParameterHistory(_ input: GetParameterHistoryRequest) -> EventLoopFuture<GetParameterHistoryResult> {
        return client.execute(operation: "GetParameterHistory", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Get details of a parameter. Don't confuse this API action with the GetParameter API action.
    public func getParameters(_ input: GetParametersRequest) -> EventLoopFuture<GetParametersResult> {
        return client.execute(operation: "GetParameters", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieve information about one or more parameters in a specific hierarchy.   Request results are returned on a best-effort basis. If you specify MaxResults in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of MaxResults. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a NextToken. You can specify the NextToken in a subsequent call to get the next set of results. 
    public func getParametersByPath(_ input: GetParametersByPathRequest) -> EventLoopFuture<GetParametersByPathResult> {
        return client.execute(operation: "GetParametersByPath", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves information about a patch baseline.
    public func getPatchBaseline(_ input: GetPatchBaselineRequest) -> EventLoopFuture<GetPatchBaselineResult> {
        return client.execute(operation: "GetPatchBaseline", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the patch baseline that should be used for the specified patch group.
    public func getPatchBaselineForPatchGroup(_ input: GetPatchBaselineForPatchGroupRequest) -> EventLoopFuture<GetPatchBaselineForPatchGroupResult> {
        return client.execute(operation: "GetPatchBaselineForPatchGroup", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///   ServiceSetting is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of "false". This means the user can't use this feature unless they change the setting to "true" and intentionally opt in for a paid feature. Services map a SettingId object to a setting value. AWS services teams define the default value for a SettingId. You can't create a new SettingId, but you can overwrite the default value if you have the ssm:UpdateServiceSetting permission for the setting. Use the UpdateServiceSetting API action to change the default setting. Or use the ResetServiceSetting to change the value back to the original value defined by the AWS service team. Query the current service setting for the account. 
    public func getServiceSetting(_ input: GetServiceSettingRequest) -> EventLoopFuture<GetServiceSettingResult> {
        return client.execute(operation: "GetServiceSetting", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  A parameter label is a user-defined alias to help you manage different versions of a parameter. When you modify a parameter, Systems Manager automatically saves a new version and increments the version number by one. A label can help you remember the purpose of a parameter when there are multiple versions.  Parameter labels have the following requirements and restrictions.   A version of a parameter can have a maximum of 10 labels.   You can't attach the same label to different versions of the same parameter. For example, if version 1 has the label Production, then you can't attach Production to version 2.   You can move a label from one version of a parameter to another.   You can't create a label when you create a new parameter. You must attach a label to a specific version of a parameter.   You can't delete a parameter label. If you no longer want to use a parameter label, then you must move it to a different version of a parameter.   A label can have a maximum of 100 characters.   Labels can contain letters (case sensitive), numbers, periods (.), hyphens (-), or underscores (_).   Labels can't begin with a number, "aws," or "ssm" (not case sensitive). If a label fails to meet these requirements, then the label is not associated with a parameter and the system displays it in the list of InvalidLabels.  
    public func labelParameterVersion(_ input: LabelParameterVersionRequest) -> EventLoopFuture<LabelParameterVersionResult> {
        return client.execute(operation: "LabelParameterVersion", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves all versions of an association for a specific association ID.
    public func listAssociationVersions(_ input: ListAssociationVersionsRequest) -> EventLoopFuture<ListAssociationVersionsResult> {
        return client.execute(operation: "ListAssociationVersions", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Returns all State Manager associations in the current AWS account and Region. You can limit the results to a specific State Manager association document or instance by specifying a filter.
    public func listAssociations(_ input: ListAssociationsRequest) -> EventLoopFuture<ListAssociationsResult> {
        return client.execute(operation: "ListAssociations", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  An invocation is copy of a command sent to a specific instance. A command can apply to one or more instances. A command invocation applies to one instance. For example, if a user runs SendCommand against three instances, then a command invocation is created for each requested instance ID. ListCommandInvocations provide status about command execution.
    public func listCommandInvocations(_ input: ListCommandInvocationsRequest) -> EventLoopFuture<ListCommandInvocationsResult> {
        return client.execute(operation: "ListCommandInvocations", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Lists the commands requested by users of the AWS account.
    public func listCommands(_ input: ListCommandsRequest) -> EventLoopFuture<ListCommandsResult> {
        return client.execute(operation: "ListCommands", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  For a specified resource ID, this API action returns a list of compliance statuses for different resource types. Currently, you can only specify one resource ID per call. List results depend on the criteria specified in the filter.
    public func listComplianceItems(_ input: ListComplianceItemsRequest) -> EventLoopFuture<ListComplianceItemsResult> {
        return client.execute(operation: "ListComplianceItems", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Returns a summary count of compliant and non-compliant resources for a compliance type. For example, this call can return State Manager associations, patches, or custom compliance types according to the filter criteria that you specify.
    public func listComplianceSummaries(_ input: ListComplianceSummariesRequest) -> EventLoopFuture<ListComplianceSummariesResult> {
        return client.execute(operation: "ListComplianceSummaries", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  List all versions for a document.
    public func listDocumentVersions(_ input: ListDocumentVersionsRequest) -> EventLoopFuture<ListDocumentVersionsResult> {
        return client.execute(operation: "ListDocumentVersions", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Returns all Systems Manager (SSM) documents in the current AWS account and Region. You can limit the results of this request by using a filter.
    public func listDocuments(_ input: ListDocumentsRequest) -> EventLoopFuture<ListDocumentsResult> {
        return client.execute(operation: "ListDocuments", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  A list of inventory items returned by the request.
    public func listInventoryEntries(_ input: ListInventoryEntriesRequest) -> EventLoopFuture<ListInventoryEntriesResult> {
        return client.execute(operation: "ListInventoryEntries", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Returns a resource-level summary count. The summary includes information about compliant and non-compliant statuses and detailed compliance-item severity counts, according to the filter criteria you specify.
    public func listResourceComplianceSummaries(_ input: ListResourceComplianceSummariesRequest) -> EventLoopFuture<ListResourceComplianceSummariesResult> {
        return client.execute(operation: "ListResourceComplianceSummaries", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Lists your resource data sync configurations. Includes information about the last time a sync attempted to start, the last sync status, and the last time a sync successfully completed. The number of sync configurations might be too large to return using a single call to ListResourceDataSync. You can limit the number of sync configurations returned by using the MaxResults parameter. To determine whether there are more sync configurations to list, check the value of NextToken in the output. If there are more sync configurations to list, you can request them by specifying the NextToken returned in the call to the parameter of a subsequent call. 
    public func listResourceDataSync(_ input: ListResourceDataSyncRequest) -> EventLoopFuture<ListResourceDataSyncResult> {
        return client.execute(operation: "ListResourceDataSync", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Returns a list of the tags assigned to the specified resource.
    public func listTagsForResource(_ input: ListTagsForResourceRequest) -> EventLoopFuture<ListTagsForResourceResult> {
        return client.execute(operation: "ListTagsForResource", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Shares a Systems Manager document publicly or privately. If you share a document privately, you must specify the AWS user account IDs for those people who can use the document. If you share a document publicly, you must specify All as the account ID.
    public func modifyDocumentPermission(_ input: ModifyDocumentPermissionRequest) -> EventLoopFuture<ModifyDocumentPermissionResponse> {
        return client.execute(operation: "ModifyDocumentPermission", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Registers a compliance type and other compliance details on a designated resource. This action lets you register custom compliance details with a resource. This call overwrites existing compliance information on the resource, so you must provide a full list of compliance items each time that you send the request. ComplianceType can be one of the following:   ExecutionId: The execution ID when the patch, association, or custom compliance item was applied.   ExecutionType: Specify patch, association, or Custom:string.   ExecutionTime. The time the patch, association, or custom compliance item was applied to the instance.   Id: The patch, association, or custom compliance ID.   Title: A title.   Status: The status of the compliance item. For example, approved for patches, or Failed for associations.   Severity: A patch severity. For example, critical.   DocumentName: A SSM document name. For example, AWS-RunPatchBaseline.   DocumentVersion: An SSM document version number. For example, 4.   Classification: A patch classification. For example, security updates.   PatchBaselineId: A patch baseline ID.   PatchSeverity: A patch severity. For example, Critical.   PatchState: A patch state. For example, InstancesWithFailedPatches.   PatchGroup: The name of a patch group.   InstalledTime: The time the association, patch, or custom compliance item was applied to the resource. Specify the time by using the following format: yyyy-MM-dd'T'HH:mm:ss'Z'  
    public func putComplianceItems(_ input: PutComplianceItemsRequest) -> EventLoopFuture<PutComplianceItemsResult> {
        return client.execute(operation: "PutComplianceItems", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Bulk update custom inventory items on one more instance. The request adds an inventory item, if it doesn't already exist, or updates an inventory item, if it does exist.
    public func putInventory(_ input: PutInventoryRequest) -> EventLoopFuture<PutInventoryResult> {
        return client.execute(operation: "PutInventory", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Add a parameter to the system.
    public func putParameter(_ input: PutParameterRequest) -> EventLoopFuture<PutParameterResult> {
        return client.execute(operation: "PutParameter", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Defines the default patch baseline for the relevant operating system. To reset the AWS predefined patch baseline as the default, specify the full patch baseline ARN as the baseline ID value. For example, for CentOS, specify arn:aws:ssm:us-east-2:733109147000:patchbaseline/pb-0574b43a65ea646ed instead of pb-0574b43a65ea646ed.
    public func registerDefaultPatchBaseline(_ input: RegisterDefaultPatchBaselineRequest) -> EventLoopFuture<RegisterDefaultPatchBaselineResult> {
        return client.execute(operation: "RegisterDefaultPatchBaseline", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Registers a patch baseline for a patch group.
    public func registerPatchBaselineForPatchGroup(_ input: RegisterPatchBaselineForPatchGroupRequest) -> EventLoopFuture<RegisterPatchBaselineForPatchGroupResult> {
        return client.execute(operation: "RegisterPatchBaselineForPatchGroup", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Registers a target with a maintenance window.
    public func registerTargetWithMaintenanceWindow(_ input: RegisterTargetWithMaintenanceWindowRequest) -> EventLoopFuture<RegisterTargetWithMaintenanceWindowResult> {
        return client.execute(operation: "RegisterTargetWithMaintenanceWindow", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Adds a new task to a maintenance window.
    public func registerTaskWithMaintenanceWindow(_ input: RegisterTaskWithMaintenanceWindowRequest) -> EventLoopFuture<RegisterTaskWithMaintenanceWindowResult> {
        return client.execute(operation: "RegisterTaskWithMaintenanceWindow", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Removes tag keys from the specified resource.
    public func removeTagsFromResource(_ input: RemoveTagsFromResourceRequest) -> EventLoopFuture<RemoveTagsFromResourceResult> {
        return client.execute(operation: "RemoveTagsFromResource", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///   ServiceSetting is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of "false". This means the user can't use this feature unless they change the setting to "true" and intentionally opt in for a paid feature. Services map a SettingId object to a setting value. AWS services teams define the default value for a SettingId. You can't create a new SettingId, but you can overwrite the default value if you have the ssm:UpdateServiceSetting permission for the setting. Use the GetServiceSetting API action to view the current value. Use the UpdateServiceSetting API action to change the default setting.  Reset the service setting for the account to the default value as provisioned by the AWS service team. 
    public func resetServiceSetting(_ input: ResetServiceSettingRequest) -> EventLoopFuture<ResetServiceSettingResult> {
        return client.execute(operation: "ResetServiceSetting", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Reconnects a session to an instance after it has been disconnected. Connections can be resumed for disconnected sessions, but not terminated sessions.  This command is primarily for use by client machines to automatically reconnect during intermittent network issues. It is not intended for any other use. 
    public func resumeSession(_ input: ResumeSessionRequest) -> EventLoopFuture<ResumeSessionResponse> {
        return client.execute(operation: "ResumeSession", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Sends a signal to an Automation execution to change the current behavior or status of the execution. 
    public func sendAutomationSignal(_ input: SendAutomationSignalRequest) -> EventLoopFuture<SendAutomationSignalResult> {
        return client.execute(operation: "SendAutomationSignal", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Runs commands on one or more managed instances.
    public func sendCommand(_ input: SendCommandRequest) -> EventLoopFuture<SendCommandResult> {
        return client.execute(operation: "SendCommand", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Use this API action to run an association immediately and only one time. This action can be helpful when troubleshooting associations.
    public func startAssociationsOnce(_ input: StartAssociationsOnceRequest) -> EventLoopFuture<StartAssociationsOnceResult> {
        return client.execute(operation: "StartAssociationsOnce", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Initiates execution of an Automation document.
    public func startAutomationExecution(_ input: StartAutomationExecutionRequest) -> EventLoopFuture<StartAutomationExecutionResult> {
        return client.execute(operation: "StartAutomationExecution", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Initiates a connection to a target (for example, an instance) for a Session Manager session. Returns a URL and token that can be used to open a WebSocket connection for sending input and receiving outputs.  AWS CLI usage: start-session is an interactive command that requires the Session Manager plugin to be installed on the client machine making the call. For information, see Install the Session Manager plugin for the AWS CLI in the AWS Systems Manager User Guide. AWS Tools for PowerShell usage: Start-SSMSession is not currently supported by AWS Tools for PowerShell on Windows local machines. 
    public func startSession(_ input: StartSessionRequest) -> EventLoopFuture<StartSessionResponse> {
        return client.execute(operation: "StartSession", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Stop an Automation that is currently running.
    public func stopAutomationExecution(_ input: StopAutomationExecutionRequest) -> EventLoopFuture<StopAutomationExecutionResult> {
        return client.execute(operation: "StopAutomationExecution", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Permanently ends a session and closes the data connection between the Session Manager client and SSM Agent on the instance. A terminated session cannot be resumed.
    public func terminateSession(_ input: TerminateSessionRequest) -> EventLoopFuture<TerminateSessionResponse> {
        return client.execute(operation: "TerminateSession", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates an association. You can update the association name and version, the document version, schedule, parameters, and Amazon S3 output.  In order to call this API action, your IAM user account, group, or role must be configured with permission to call the DescribeAssociation API action. If you don't have permission to call DescribeAssociation, then you receive the following error: An error occurred (AccessDeniedException) when calling the UpdateAssociation operation: User: &lt;user_arn&gt; is not authorized to perform: ssm:DescribeAssociation on resource: &lt;resource_arn&gt;   When you update an association, the association immediately runs against the specified targets. 
    public func updateAssociation(_ input: UpdateAssociationRequest) -> EventLoopFuture<UpdateAssociationResult> {
        return client.execute(operation: "UpdateAssociation", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates the status of the Systems Manager document associated with the specified instance.
    public func updateAssociationStatus(_ input: UpdateAssociationStatusRequest) -> EventLoopFuture<UpdateAssociationStatusResult> {
        return client.execute(operation: "UpdateAssociationStatus", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates one or more values for an SSM document.
    public func updateDocument(_ input: UpdateDocumentRequest) -> EventLoopFuture<UpdateDocumentResult> {
        return client.execute(operation: "UpdateDocument", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Set the default version of a document. 
    public func updateDocumentDefaultVersion(_ input: UpdateDocumentDefaultVersionRequest) -> EventLoopFuture<UpdateDocumentDefaultVersionResult> {
        return client.execute(operation: "UpdateDocumentDefaultVersion", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates an existing maintenance window. Only specified parameters are modified.  The value you specify for Duration determines the specific end time for the maintenance window based on the time it begins. No maintenance window tasks are permitted to start after the resulting endtime minus the number of hours you specify for Cutoff. For example, if the maintenance window starts at 3 PM, the duration is three hours, and the value you specify for Cutoff is one hour, no maintenance window tasks can start after 5 PM. 
    public func updateMaintenanceWindow(_ input: UpdateMaintenanceWindowRequest) -> EventLoopFuture<UpdateMaintenanceWindowResult> {
        return client.execute(operation: "UpdateMaintenanceWindow", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Modifies the target of an existing maintenance window. You can change the following:   Name   Description   Owner   IDs for an ID target   Tags for a Tag target   From any supported tag type to another. The three supported tag types are ID target, Tag target, and resource group. For more information, see Target.    If a parameter is null, then the corresponding field is not modified. 
    public func updateMaintenanceWindowTarget(_ input: UpdateMaintenanceWindowTargetRequest) -> EventLoopFuture<UpdateMaintenanceWindowTargetResult> {
        return client.execute(operation: "UpdateMaintenanceWindowTarget", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Modifies a task assigned to a maintenance window. You can't change the task type, but you can change the following values:   TaskARN. For example, you can change a RUN_COMMAND task from AWS-RunPowerShellScript to AWS-RunShellScript.   ServiceRoleArn   TaskInvocationParameters   Priority   MaxConcurrency   MaxErrors   If a parameter is null, then the corresponding field is not modified. Also, if you set Replace to true, then all fields required by the RegisterTaskWithMaintenanceWindow action are required for this request. Optional fields that aren't specified are set to null.
    public func updateMaintenanceWindowTask(_ input: UpdateMaintenanceWindowTaskRequest) -> EventLoopFuture<UpdateMaintenanceWindowTaskResult> {
        return client.execute(operation: "UpdateMaintenanceWindowTask", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Changes the Amazon Identity and Access Management (IAM) role that is assigned to the on-premises instance or virtual machines (VM). IAM roles are first assigned to these hybrid instances during the activation process. For more information, see CreateActivation.
    public func updateManagedInstanceRole(_ input: UpdateManagedInstanceRoleRequest) -> EventLoopFuture<UpdateManagedInstanceRoleResult> {
        return client.execute(operation: "UpdateManagedInstanceRole", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Edit or change an OpsItem. You must have permission in AWS Identity and Access Management (IAM) to update an OpsItem. For more information, see Getting started with OpsCenter in the AWS Systems Manager User Guide. Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see AWS Systems Manager OpsCenter in the AWS Systems Manager User Guide. 
    public func updateOpsItem(_ input: UpdateOpsItemRequest) -> EventLoopFuture<UpdateOpsItemResponse> {
        return client.execute(operation: "UpdateOpsItem", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Modifies an existing patch baseline. Fields not specified in the request are left unchanged.  For information about valid key and value pairs in PatchFilters for each supported operating system type, see PatchFilter. 
    public func updatePatchBaseline(_ input: UpdatePatchBaselineRequest) -> EventLoopFuture<UpdatePatchBaselineResult> {
        return client.execute(operation: "UpdatePatchBaseline", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Update a resource data sync. After you create a resource data sync for a Region, you can't change the account options for that sync. For example, if you create a sync in the us-east-2 (Ohio) Region and you choose the Include only the current account option, you can't edit that sync later and choose the Include all accounts from my AWS Organizations configuration option. Instead, you must delete the first resource data sync, and create a new one.  This API action only supports a resource data sync that was created with a SyncFromSource SyncType. 
    public func updateResourceDataSync(_ input: UpdateResourceDataSyncRequest) -> EventLoopFuture<UpdateResourceDataSyncResult> {
        return client.execute(operation: "UpdateResourceDataSync", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///   ServiceSetting is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of "false". This means the user can't use this feature unless they change the setting to "true" and intentionally opt in for a paid feature. Services map a SettingId object to a setting value. AWS services teams define the default value for a SettingId. You can't create a new SettingId, but you can overwrite the default value if you have the ssm:UpdateServiceSetting permission for the setting. Use the GetServiceSetting API action to view the current value. Or, use the ResetServiceSetting to change the value back to the original value defined by the AWS service team. Update the service setting for the account. 
    public func updateServiceSetting(_ input: UpdateServiceSettingRequest) -> EventLoopFuture<UpdateServiceSettingResult> {
        return client.execute(operation: "UpdateServiceSetting", path: "/", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }
}

extension SSM {
    /// internal initialiser used by `withNewContext`
    init(client: AWSClient, config: AWSServiceConfig, context: AWSServiceContext) {
        self.client = client
        self.config = config
        self.context = context
    }
}
