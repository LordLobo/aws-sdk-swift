//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore

/**
Client object for interacting with AWS Schemas service.

Amazon EventBridge Schema Registry
*/
public struct Schemas: AWSService {

    //MARK: Member variables

    public let client: AWSClient
    public let config: AWSServiceConfig
    public let context: AWSServiceContext

    //MARK: Initialization

    /// Initialize the Schemas client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - timeout: Timeout value for HTTP requests
    public init(
        client: AWSClient,
        region: AWSSDKSwiftCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        timeout: TimeAmount? = nil
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            service: "schemas",
            serviceProtocol: .restjson,
            apiVersion: "2019-12-02",
            endpoint: endpoint,
            possibleErrorTypes: [SchemasErrorType.self]        )
        self.context = .init(timeout: timeout ?? .seconds(20))
    }
    
    /// create copy of service with new context
    public func withNewContext(_ process: (AWSServiceContext) -> AWSServiceContext) -> Self {
        return Self(client: self.client, config: self.config, context: process(self.context))
    }
    
    //MARK: API Calls

    ///  Creates a discoverer.
    public func createDiscoverer(_ input: CreateDiscovererRequest) -> EventLoopFuture<CreateDiscovererResponse> {
        return client.execute(operation: "CreateDiscoverer", path: "/v1/discoverers", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a registry.
    public func createRegistry(_ input: CreateRegistryRequest) -> EventLoopFuture<CreateRegistryResponse> {
        return client.execute(operation: "CreateRegistry", path: "/v1/registries/name/{registryName}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a schema definition. Inactive schemas will be deleted after two years.
    public func createSchema(_ input: CreateSchemaRequest) -> EventLoopFuture<CreateSchemaResponse> {
        return client.execute(operation: "CreateSchema", path: "/v1/registries/name/{registryName}/schemas/name/{schemaName}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Deletes a discoverer.
    @discardableResult public func deleteDiscoverer(_ input: DeleteDiscovererRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteDiscoverer", path: "/v1/discoverers/id/{discovererId}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes a Registry.
    @discardableResult public func deleteRegistry(_ input: DeleteRegistryRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteRegistry", path: "/v1/registries/name/{registryName}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Delete the resource-based policy attached to the specified registry.
    @discardableResult public func deleteResourcePolicy(_ input: DeleteResourcePolicyRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteResourcePolicy", path: "/v1/policy", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Delete a schema definition.
    @discardableResult public func deleteSchema(_ input: DeleteSchemaRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteSchema", path: "/v1/registries/name/{registryName}/schemas/name/{schemaName}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Delete the schema version definition
    @discardableResult public func deleteSchemaVersion(_ input: DeleteSchemaVersionRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteSchemaVersion", path: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/version/{schemaVersion}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Describe the code binding URI.
    public func describeCodeBinding(_ input: DescribeCodeBindingRequest) -> EventLoopFuture<DescribeCodeBindingResponse> {
        return client.execute(operation: "DescribeCodeBinding", path: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Describes the discoverer.
    public func describeDiscoverer(_ input: DescribeDiscovererRequest) -> EventLoopFuture<DescribeDiscovererResponse> {
        return client.execute(operation: "DescribeDiscoverer", path: "/v1/discoverers/id/{discovererId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Describes the registry.
    public func describeRegistry(_ input: DescribeRegistryRequest) -> EventLoopFuture<DescribeRegistryResponse> {
        return client.execute(operation: "DescribeRegistry", path: "/v1/registries/name/{registryName}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieve the schema definition.
    public func describeSchema(_ input: DescribeSchemaRequest) -> EventLoopFuture<DescribeSchemaResponse> {
        return client.execute(operation: "DescribeSchema", path: "/v1/registries/name/{registryName}/schemas/name/{schemaName}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Get the code binding source URI.
    public func getCodeBindingSource(_ input: GetCodeBindingSourceRequest) -> EventLoopFuture<GetCodeBindingSourceResponse> {
        return client.execute(operation: "GetCodeBindingSource", path: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}/source", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Get the discovered schema that was generated based on sampled events.
    public func getDiscoveredSchema(_ input: GetDiscoveredSchemaRequest) -> EventLoopFuture<GetDiscoveredSchemaResponse> {
        return client.execute(operation: "GetDiscoveredSchema", path: "/v1/discover", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the resource-based policy attached to a given registry.
    public func getResourcePolicy(_ input: GetResourcePolicyRequest) -> EventLoopFuture<GetResourcePolicyResponse> {
        return client.execute(operation: "GetResourcePolicy", path: "/v1/policy", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  List the discoverers.
    public func listDiscoverers(_ input: ListDiscoverersRequest) -> EventLoopFuture<ListDiscoverersResponse> {
        return client.execute(operation: "ListDiscoverers", path: "/v1/discoverers", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  List the registries.
    public func listRegistries(_ input: ListRegistriesRequest) -> EventLoopFuture<ListRegistriesResponse> {
        return client.execute(operation: "ListRegistries", path: "/v1/registries", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Provides a list of the schema versions and related information.
    public func listSchemaVersions(_ input: ListSchemaVersionsRequest) -> EventLoopFuture<ListSchemaVersionsResponse> {
        return client.execute(operation: "ListSchemaVersions", path: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/versions", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  List the schemas.
    public func listSchemas(_ input: ListSchemasRequest) -> EventLoopFuture<ListSchemasResponse> {
        return client.execute(operation: "ListSchemas", path: "/v1/registries/name/{registryName}/schemas", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Get tags for resource.
    public func listTagsForResource(_ input: ListTagsForResourceRequest) -> EventLoopFuture<ListTagsForResourceResponse> {
        return client.execute(operation: "ListTagsForResource", path: "/tags/{resource-arn}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Put code binding URI
    public func putCodeBinding(_ input: PutCodeBindingRequest) -> EventLoopFuture<PutCodeBindingResponse> {
        return client.execute(operation: "PutCodeBinding", path: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  The name of the policy.
    public func putResourcePolicy(_ input: PutResourcePolicyRequest) -> EventLoopFuture<PutResourcePolicyResponse> {
        return client.execute(operation: "PutResourcePolicy", path: "/v1/policy", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Search the schemas
    public func searchSchemas(_ input: SearchSchemasRequest) -> EventLoopFuture<SearchSchemasResponse> {
        return client.execute(operation: "SearchSchemas", path: "/v1/registries/name/{registryName}/schemas/search", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Starts the discoverer
    public func startDiscoverer(_ input: StartDiscovererRequest) -> EventLoopFuture<StartDiscovererResponse> {
        return client.execute(operation: "StartDiscoverer", path: "/v1/discoverers/id/{discovererId}/start", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Stops the discoverer
    public func stopDiscoverer(_ input: StopDiscovererRequest) -> EventLoopFuture<StopDiscovererResponse> {
        return client.execute(operation: "StopDiscoverer", path: "/v1/discoverers/id/{discovererId}/stop", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Add tags to a resource.
    @discardableResult public func tagResource(_ input: TagResourceRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "TagResource", path: "/tags/{resource-arn}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Removes tags from a resource.
    @discardableResult public func untagResource(_ input: UntagResourceRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "UntagResource", path: "/tags/{resource-arn}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Updates the discoverer
    public func updateDiscoverer(_ input: UpdateDiscovererRequest) -> EventLoopFuture<UpdateDiscovererResponse> {
        return client.execute(operation: "UpdateDiscoverer", path: "/v1/discoverers/id/{discovererId}", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Updates a registry.
    public func updateRegistry(_ input: UpdateRegistryRequest) -> EventLoopFuture<UpdateRegistryResponse> {
        return client.execute(operation: "UpdateRegistry", path: "/v1/registries/name/{registryName}", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Updates the schema definition Inactive schemas will be deleted after two years.
    public func updateSchema(_ input: UpdateSchemaRequest) -> EventLoopFuture<UpdateSchemaResponse> {
        return client.execute(operation: "UpdateSchema", path: "/v1/registries/name/{registryName}/schemas/name/{schemaName}", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }
}

extension Schemas {
    /// internal initialiser used by `withNewContext`
    init(client: AWSClient, config: AWSServiceConfig, context: AWSServiceContext) {
        self.client = client
        self.config = config
        self.context = context
    }
}
