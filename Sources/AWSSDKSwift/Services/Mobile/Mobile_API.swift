//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore

/**
Client object for interacting with AWS Mobile service.

 AWS Mobile Service provides mobile app and website developers with capabilities required to configure AWS resources and bootstrap their developer desktop projects with the necessary SDKs, constants, tools and samples to make use of those resources. 
*/
public struct Mobile: AWSService {

    //MARK: Member variables

    public let client: AWSClient
    public let config: AWSServiceConfig
    public let context: AWSServiceContext

    //MARK: Initialization

    /// Initialize the Mobile client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - timeout: Timeout value for HTTP requests
    public init(
        client: AWSClient,
        region: AWSSDKSwiftCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        timeout: TimeAmount? = nil
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            service: "mobile",
            signingName: "AWSMobileHubService",
            serviceProtocol: .restjson,
            apiVersion: "2017-07-01",
            endpoint: endpoint,
            possibleErrorTypes: [MobileErrorType.self]        )
        self.context = .init(timeout: timeout ?? .seconds(20))
    }
    
    /// create copy of service with new context
    public func withNewContext(_ process: (AWSServiceContext) -> AWSServiceContext) -> Self {
        return Self(client: self.client, config: self.config, context: process(self.context))
    }
    
    //MARK: API Calls

    ///   Creates an AWS Mobile Hub project. 
    public func createProject(_ input: CreateProjectRequest) -> EventLoopFuture<CreateProjectResult> {
        return client.execute(operation: "CreateProject", path: "/projects", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///   Delets a project in AWS Mobile Hub. 
    public func deleteProject(_ input: DeleteProjectRequest) -> EventLoopFuture<DeleteProjectResult> {
        return client.execute(operation: "DeleteProject", path: "/projects/{projectId}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///   Get the bundle details for the requested bundle id. 
    public func describeBundle(_ input: DescribeBundleRequest) -> EventLoopFuture<DescribeBundleResult> {
        return client.execute(operation: "DescribeBundle", path: "/bundles/{bundleId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///   Gets details about a project in AWS Mobile Hub. 
    public func describeProject(_ input: DescribeProjectRequest) -> EventLoopFuture<DescribeProjectResult> {
        return client.execute(operation: "DescribeProject", path: "/project", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///   Generates customized software development kit (SDK) and or tool packages used to integrate mobile web or mobile app clients with backend AWS resources. 
    public func exportBundle(_ input: ExportBundleRequest) -> EventLoopFuture<ExportBundleResult> {
        return client.execute(operation: "ExportBundle", path: "/bundles/{bundleId}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///   Exports project configuration to a snapshot which can be downloaded and shared. Note that mobile app push credentials are encrypted in exported projects, so they can only be shared successfully within the same AWS account. 
    public func exportProject(_ input: ExportProjectRequest) -> EventLoopFuture<ExportProjectResult> {
        return client.execute(operation: "ExportProject", path: "/exports/{projectId}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///   List all available bundles. 
    public func listBundles(_ input: ListBundlesRequest) -> EventLoopFuture<ListBundlesResult> {
        return client.execute(operation: "ListBundles", path: "/bundles", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///   Lists projects in AWS Mobile Hub. 
    public func listProjects(_ input: ListProjectsRequest) -> EventLoopFuture<ListProjectsResult> {
        return client.execute(operation: "ListProjects", path: "/projects", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///   Update an existing project. 
    public func updateProject(_ input: UpdateProjectRequest) -> EventLoopFuture<UpdateProjectResult> {
        return client.execute(operation: "UpdateProject", path: "/update", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }
}

extension Mobile {
    /// internal initialiser used by `withNewContext`
    init(client: AWSClient, config: AWSServiceConfig, context: AWSServiceContext) {
        self.client = client
        self.config = config
        self.context = context
    }
}
