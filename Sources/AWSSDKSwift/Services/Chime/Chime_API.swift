//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore

/**
Client object for interacting with AWS Chime service.

The Amazon Chime API (application programming interface) is designed for developers to perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes. It also includes some server-side API actions to use with the Amazon Chime SDK. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide. You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls. We recommend using an AWS SDK or the AWS CLI. Each API operation includes links to information about using it with a language-specific AWS SDK or the AWS CLI.  Using an AWS SDK  You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the AWS Developer Center.  Using the AWS CLI  Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see Installing the AWS Command Line Interface in the AWS Command Line Interface User Guide. For a list of available Amazon Chime commands, see the Amazon Chime commands in the AWS CLI Command Reference.  Using REST API  If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports signature version 4. For more information, see Signature Version 4 Signing Process in the Amazon Web Services General Reference. When making REST API calls, use the service name chime and REST endpoint https://service.chime.aws.amazon.com.   Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see Identity and Access Management for Amazon Chime in the Amazon Chime Administration Guide.
*/
public struct Chime: AWSService {

    //MARK: Member variables

    public let client: AWSClient
    public let config: AWSServiceConfig
    public let context: AWSServiceContext

    //MARK: Initialization

    /// Initialize the Chime client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - timeout: Timeout value for HTTP requests
    public init(
        client: AWSClient,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        timeout: TimeAmount? = nil
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: nil,
            partition: partition,
            service: "chime",
            serviceProtocol: .restjson,
            apiVersion: "2018-05-01",
            endpoint: endpoint,
            serviceEndpoints: ["aws-global": "service.chime.aws.amazon.com"],
            partitionEndpoints: [.aws: (endpoint: "aws-global", region: .useast1)],
            possibleErrorTypes: [ChimeErrorType.self]        )
        self.context = .init(timeout: timeout ?? .seconds(20))
    }
    
    /// create copy of service with new context
    public func withNewContext(_ process: (AWSServiceContext) -> AWSServiceContext) -> Self {
        return Self(client: self.client, config: self.config, context: process(self.context))
    }
    
    //MARK: API Calls

    ///  Associates a phone number with the specified Amazon Chime user.
    public func associatePhoneNumberWithUser(_ input: AssociatePhoneNumberWithUserRequest) -> EventLoopFuture<AssociatePhoneNumberWithUserResponse> {
        return client.execute(operation: "AssociatePhoneNumberWithUser", path: "/accounts/{accountId}/users/{userId}?operation=associate-phone-number", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Associates phone numbers with the specified Amazon Chime Voice Connector.
    public func associatePhoneNumbersWithVoiceConnector(_ input: AssociatePhoneNumbersWithVoiceConnectorRequest) -> EventLoopFuture<AssociatePhoneNumbersWithVoiceConnectorResponse> {
        return client.execute(operation: "AssociatePhoneNumbersWithVoiceConnector", path: "/voice-connectors/{voiceConnectorId}?operation=associate-phone-numbers", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Associates phone numbers with the specified Amazon Chime Voice Connector group.
    public func associatePhoneNumbersWithVoiceConnectorGroup(_ input: AssociatePhoneNumbersWithVoiceConnectorGroupRequest) -> EventLoopFuture<AssociatePhoneNumbersWithVoiceConnectorGroupResponse> {
        return client.execute(operation: "AssociatePhoneNumbersWithVoiceConnectorGroup", path: "/voice-connector-groups/{voiceConnectorGroupId}?operation=associate-phone-numbers", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Associates the specified sign-in delegate groups with the specified Amazon Chime account.
    public func associateSigninDelegateGroupsWithAccount(_ input: AssociateSigninDelegateGroupsWithAccountRequest) -> EventLoopFuture<AssociateSigninDelegateGroupsWithAccountResponse> {
        return client.execute(operation: "AssociateSigninDelegateGroupsWithAccount", path: "/accounts/{accountId}?operation=associate-signin-delegate-groups", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates up to 100 new attendees for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide. 
    public func batchCreateAttendee(_ input: BatchCreateAttendeeRequest) -> EventLoopFuture<BatchCreateAttendeeResponse> {
        return client.execute(operation: "BatchCreateAttendee", path: "/meetings/{meetingId}/attendees?operation=batch-create", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be either users or bots. The member role designates whether the member is a chat room administrator or a general chat room member.
    public func batchCreateRoomMembership(_ input: BatchCreateRoomMembershipRequest) -> EventLoopFuture<BatchCreateRoomMembershipResponse> {
        return client.execute(operation: "BatchCreateRoomMembership", path: "/accounts/{accountId}/rooms/{roomId}/memberships?operation=batch-create", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Moves phone numbers into the Deletion queue. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted. Phone numbers remain in the Deletion queue for 7 days before they are deleted permanently.
    public func batchDeletePhoneNumber(_ input: BatchDeletePhoneNumberRequest) -> EventLoopFuture<BatchDeletePhoneNumberResponse> {
        return client.execute(operation: "BatchDeletePhoneNumber", path: "/phone-numbers?operation=batch-delete", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Suspends up to 50 users from a Team or EnterpriseLWA Amazon Chime account. For more information about different account types, see Managing Your Amazon Chime Accounts in the Amazon Chime Administration Guide. Users suspended from a Team account are disassociated from the account, but they can continue to use Amazon Chime as free users. To remove the suspension from suspended Team account users, invite them to the Team account again. You can use the InviteUsers action to do so. Users suspended from an EnterpriseLWA account are immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension from suspended EnterpriseLWA account users, use the BatchUnsuspendUser action.  To sign out users without suspending them, use the LogoutUser action.
    public func batchSuspendUser(_ input: BatchSuspendUserRequest) -> EventLoopFuture<BatchSuspendUserResponse> {
        return client.execute(operation: "BatchSuspendUser", path: "/accounts/{accountId}/users?operation=suspend", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Removes the suspension from up to 50 previously suspended users for the specified Amazon Chime EnterpriseLWA account. Only users on EnterpriseLWA accounts can be unsuspended using this action. For more information about different account types, see Managing Your Amazon Chime Accounts in the Amazon Chime Administration Guide. Previously suspended users who are unsuspended using this action are returned to Registered status. Users who are not previously suspended are ignored.
    public func batchUnsuspendUser(_ input: BatchUnsuspendUserRequest) -> EventLoopFuture<BatchUnsuspendUserResponse> {
        return client.execute(operation: "BatchUnsuspendUser", path: "/accounts/{accountId}/users?operation=unsuspend", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates phone number product types or calling names. You can update one attribute at a time for each UpdatePhoneNumberRequestItem. For example, you can update either the product type or the calling name. For product types, choose from Amazon Chime Business Calling and Amazon Chime Voice Connector. For toll-free numbers, you must use the Amazon Chime Voice Connector product type. Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.
    public func batchUpdatePhoneNumber(_ input: BatchUpdatePhoneNumberRequest) -> EventLoopFuture<BatchUpdatePhoneNumberResponse> {
        return client.execute(operation: "BatchUpdatePhoneNumber", path: "/phone-numbers?operation=batch-update", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates user details within the UpdateUserRequestItem object for up to 20 users for the specified Amazon Chime account. Currently, only LicenseType updates are supported for this action.
    public func batchUpdateUser(_ input: BatchUpdateUserRequest) -> EventLoopFuture<BatchUpdateUserResponse> {
        return client.execute(operation: "BatchUpdateUser", path: "/accounts/{accountId}/users", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates an Amazon Chime account under the administrator's AWS account. Only Team account types are currently supported for this action. For more information about different account types, see Managing Your Amazon Chime Accounts in the Amazon Chime Administration Guide.
    public func createAccount(_ input: CreateAccountRequest) -> EventLoopFuture<CreateAccountResponse> {
        return client.execute(operation: "CreateAccount", path: "/accounts", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.
    public func createAttendee(_ input: CreateAttendeeRequest) -> EventLoopFuture<CreateAttendeeResponse> {
        return client.execute(operation: "CreateAttendee", path: "/meetings/{meetingId}/attendees", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a bot for an Amazon Chime Enterprise account.
    public func createBot(_ input: CreateBotRequest) -> EventLoopFuture<CreateBotResponse> {
        return client.execute(operation: "CreateBot", path: "/accounts/{accountId}/bots", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about specifying media Regions, see Amazon Chime SDK Media Regions in the Amazon Chime Developer Guide. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.
    public func createMeeting(_ input: CreateMeetingRequest) -> EventLoopFuture<CreateMeetingResponse> {
        return client.execute(operation: "CreateMeeting", path: "/meetings", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see Amazon Chime SDK Media Regions in the Amazon Chime Developer Guide. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.
    public func createMeetingWithAttendees(_ input: CreateMeetingWithAttendeesRequest) -> EventLoopFuture<CreateMeetingWithAttendeesResponse> {
        return client.execute(operation: "CreateMeetingWithAttendees", path: "/meetings?operation=create-attendees", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates an order for phone numbers to be provisioned. Choose from Amazon Chime Business Calling and Amazon Chime Voice Connector product types. For toll-free numbers, you must use the Amazon Chime Voice Connector product type.
    public func createPhoneNumberOrder(_ input: CreatePhoneNumberOrderRequest) -> EventLoopFuture<CreatePhoneNumberOrderResponse> {
        return client.execute(operation: "CreatePhoneNumberOrder", path: "/phone-number-orders", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers.
    public func createProxySession(_ input: CreateProxySessionRequest) -> EventLoopFuture<CreateProxySessionResponse> {
        return client.execute(operation: "CreateProxySession", path: "/voice-connectors/{voiceConnectorId}/proxy-sessions", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a chat room for the specified Amazon Chime Enterprise account.
    public func createRoom(_ input: CreateRoomRequest) -> EventLoopFuture<CreateRoomResponse> {
        return client.execute(operation: "CreateRoom", path: "/accounts/{accountId}/rooms", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.
    public func createRoomMembership(_ input: CreateRoomMembershipRequest) -> EventLoopFuture<CreateRoomMembershipResponse> {
        return client.execute(operation: "CreateRoomMembership", path: "/accounts/{accountId}/rooms/{roomId}/memberships", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates a user under the specified Amazon Chime account.
    public func createUser(_ input: CreateUserRequest) -> EventLoopFuture<CreateUserResponse> {
        return client.execute(operation: "CreateUser", path: "/accounts/{accountId}/users?operation=create", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region. Enabling CreateVoiceConnectorRequest$RequireEncryption configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked.
    public func createVoiceConnector(_ input: CreateVoiceConnectorRequest) -> EventLoopFuture<CreateVoiceConnectorResponse> {
        return client.execute(operation: "CreateVoiceConnector", path: "/voice-connectors", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by including VoiceConnectorItems in the request. You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.
    public func createVoiceConnectorGroup(_ input: CreateVoiceConnectorGroupRequest) -> EventLoopFuture<CreateVoiceConnectorGroupResponse> {
        return client.execute(operation: "CreateVoiceConnectorGroup", path: "/voice-connector-groups", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the specified Amazon Chime account. You must suspend all users before deleting a Team account. You can use the BatchSuspendUser action to do so. For EnterpriseLWA and EnterpriseAD accounts, you must release the claimed domains for your Amazon Chime account before deletion. As soon as you release the domain, all users under that account are suspended. Deleted accounts appear in your Disabled accounts list for 90 days. To restore a deleted account from your Disabled accounts list, you must contact AWS Support. After 90 days, deleted accounts are permanently removed from your Disabled accounts list.
    public func deleteAccount(_ input: DeleteAccountRequest) -> EventLoopFuture<DeleteAccountResponse> {
        return client.execute(operation: "DeleteAccount", path: "/accounts/{accountId}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their JoinToken. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.
    @discardableResult public func deleteAttendee(_ input: DeleteAttendeeRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteAttendee", path: "/meetings/{meetingId}/attendees/{attendeeId}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the events configuration that allows a bot to receive outgoing events.
    @discardableResult public func deleteEventsConfiguration(_ input: DeleteEventsConfigurationRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteEventsConfiguration", path: "/accounts/{accountId}/bots/{botId}/events-configuration", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the specified Amazon Chime SDK meeting. When a meeting is deleted, its attendees are also deleted and clients can no longer join it. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.
    @discardableResult public func deleteMeeting(_ input: DeleteMeetingRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteMeeting", path: "/meetings/{meetingId}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Moves the specified phone number into the Deletion queue. A phone number must be disassociated from any users or Amazon Chime Voice Connectors before it can be deleted. Deleted phone numbers remain in the Deletion queue for 7 days before they are deleted permanently.
    @discardableResult public func deletePhoneNumber(_ input: DeletePhoneNumberRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeletePhoneNumber", path: "/phone-numbers/{phoneNumberId}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the specified proxy session from the specified Amazon Chime Voice Connector.
    @discardableResult public func deleteProxySession(_ input: DeleteProxySessionRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteProxySession", path: "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes a chat room in an Amazon Chime Enterprise account.
    @discardableResult public func deleteRoom(_ input: DeleteRoomRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteRoom", path: "/accounts/{accountId}/rooms/{roomId}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Removes a member from a chat room in an Amazon Chime Enterprise account.
    @discardableResult public func deleteRoomMembership(_ input: DeleteRoomMembershipRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteRoomMembership", path: "/accounts/{accountId}/rooms/{roomId}/memberships/{memberId}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the Amazon Chime Voice Connector must be disassociated from it before it can be deleted.
    @discardableResult public func deleteVoiceConnector(_ input: DeleteVoiceConnectorRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteVoiceConnector", path: "/voice-connectors/{voiceConnectorId}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the emergency calling configuration details from the specified Amazon Chime Voice Connector.
    @discardableResult public func deleteVoiceConnectorEmergencyCallingConfiguration(_ input: DeleteVoiceConnectorEmergencyCallingConfigurationRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteVoiceConnectorEmergencyCallingConfiguration", path: "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the specified Amazon Chime Voice Connector group. Any VoiceConnectorItems and phone numbers associated with the group must be removed before it can be deleted.
    @discardableResult public func deleteVoiceConnectorGroup(_ input: DeleteVoiceConnectorGroupRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteVoiceConnectorGroup", path: "/voice-connector-groups/{voiceConnectorGroupId}", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the origination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the origination settings. 
    @discardableResult public func deleteVoiceConnectorOrigination(_ input: DeleteVoiceConnectorOriginationRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteVoiceConnectorOrigination", path: "/voice-connectors/{voiceConnectorId}/origination", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the proxy configuration from the specified Amazon Chime Voice Connector.
    @discardableResult public func deleteVoiceConnectorProxy(_ input: DeleteVoiceConnectorProxyRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteVoiceConnectorProxy", path: "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the streaming configuration for the specified Amazon Chime Voice Connector.
    @discardableResult public func deleteVoiceConnectorStreamingConfiguration(_ input: DeleteVoiceConnectorStreamingConfigurationRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteVoiceConnectorStreamingConfiguration", path: "/voice-connectors/{voiceConnectorId}/streaming-configuration", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the termination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the termination settings. 
    @discardableResult public func deleteVoiceConnectorTermination(_ input: DeleteVoiceConnectorTerminationRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteVoiceConnectorTermination", path: "/voice-connectors/{voiceConnectorId}/termination", httpMethod: .DELETE, input: input, config: self.config, context: self.context)
    }

    ///  Deletes the specified SIP credentials used by your equipment to authenticate during call termination.
    @discardableResult public func deleteVoiceConnectorTerminationCredentials(_ input: DeleteVoiceConnectorTerminationCredentialsRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "DeleteVoiceConnectorTerminationCredentials", path: "/voice-connectors/{voiceConnectorId}/termination/credentials?operation=delete", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Disassociates the primary provisioned phone number from the specified Amazon Chime user.
    public func disassociatePhoneNumberFromUser(_ input: DisassociatePhoneNumberFromUserRequest) -> EventLoopFuture<DisassociatePhoneNumberFromUserResponse> {
        return client.execute(operation: "DisassociatePhoneNumberFromUser", path: "/accounts/{accountId}/users/{userId}?operation=disassociate-phone-number", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.
    public func disassociatePhoneNumbersFromVoiceConnector(_ input: DisassociatePhoneNumbersFromVoiceConnectorRequest) -> EventLoopFuture<DisassociatePhoneNumbersFromVoiceConnectorResponse> {
        return client.execute(operation: "DisassociatePhoneNumbersFromVoiceConnector", path: "/voice-connectors/{voiceConnectorId}?operation=disassociate-phone-numbers", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.
    public func disassociatePhoneNumbersFromVoiceConnectorGroup(_ input: DisassociatePhoneNumbersFromVoiceConnectorGroupRequest) -> EventLoopFuture<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse> {
        return client.execute(operation: "DisassociatePhoneNumbersFromVoiceConnectorGroup", path: "/voice-connector-groups/{voiceConnectorGroupId}?operation=disassociate-phone-numbers", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.
    public func disassociateSigninDelegateGroupsFromAccount(_ input: DisassociateSigninDelegateGroupsFromAccountRequest) -> EventLoopFuture<DisassociateSigninDelegateGroupsFromAccountResponse> {
        return client.execute(operation: "DisassociateSigninDelegateGroupsFromAccount", path: "/accounts/{accountId}?operation=disassociate-signin-delegate-groups", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves details for the specified Amazon Chime account, such as account type and supported licenses.
    public func getAccount(_ input: GetAccountRequest) -> EventLoopFuture<GetAccountResponse> {
        return client.execute(operation: "GetAccount", path: "/accounts/{accountId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves account settings for the specified Amazon Chime account ID, such as remote control and dial out settings. For more information about these settings, see Use the Policies Page in the Amazon Chime Administration Guide.
    public func getAccountSettings(_ input: GetAccountSettingsRequest) -> EventLoopFuture<GetAccountSettingsResponse> {
        return client.execute(operation: "GetAccountSettings", path: "/accounts/{accountId}/settings", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.
    public func getAttendee(_ input: GetAttendeeRequest) -> EventLoopFuture<GetAttendeeResponse> {
        return client.execute(operation: "GetAttendee", path: "/meetings/{meetingId}/attendees/{attendeeId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.
    public func getBot(_ input: GetBotRequest) -> EventLoopFuture<GetBotResponse> {
        return client.execute(operation: "GetBot", path: "/accounts/{accountId}/bots/{botId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN. 
    public func getEventsConfiguration(_ input: GetEventsConfigurationRequest) -> EventLoopFuture<GetEventsConfigurationResponse> {
        return client.execute(operation: "GetEventsConfiguration", path: "/accounts/{accountId}/bots/{botId}/events-configuration", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
    public func getGlobalSettings() -> EventLoopFuture<GetGlobalSettingsResponse> {
        return client.execute(operation: "GetGlobalSettings", path: "/settings", httpMethod: .GET, config: self.config, context: self.context)
    }

    ///  Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.
    public func getMeeting(_ input: GetMeetingRequest) -> EventLoopFuture<GetMeetingResponse> {
        return client.execute(operation: "GetMeeting", path: "/meetings/{meetingId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.
    public func getPhoneNumber(_ input: GetPhoneNumberRequest) -> EventLoopFuture<GetPhoneNumberResponse> {
        return client.execute(operation: "GetPhoneNumber", path: "/phone-numbers/{phoneNumberId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves details for the specified phone number order, such as order creation timestamp, phone numbers in E.164 format, product type, and order status.
    public func getPhoneNumberOrder(_ input: GetPhoneNumberOrderRequest) -> EventLoopFuture<GetPhoneNumberOrderResponse> {
        return client.execute(operation: "GetPhoneNumberOrder", path: "/phone-number-orders/{phoneNumberOrderId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the phone number settings for the administrator's AWS account, such as the default outbound calling name.
    public func getPhoneNumberSettings() -> EventLoopFuture<GetPhoneNumberSettingsResponse> {
        return client.execute(operation: "GetPhoneNumberSettings", path: "/settings/phone-number", httpMethod: .GET, config: self.config, context: self.context)
    }

    ///  Gets the specified proxy session details for the specified Amazon Chime Voice Connector.
    public func getProxySession(_ input: GetProxySessionRequest) -> EventLoopFuture<GetProxySessionResponse> {
        return client.execute(operation: "GetProxySession", path: "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Gets the retention settings for the specified Amazon Chime Enterprise account. For more information about retention settings, see Managing Chat Retention Policies in the Amazon Chime Administration Guide.
    public func getRetentionSettings(_ input: GetRetentionSettingsRequest) -> EventLoopFuture<GetRetentionSettingsResponse> {
        return client.execute(operation: "GetRetentionSettings", path: "/accounts/{accountId}/retention-settings", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.
    public func getRoom(_ input: GetRoomRequest) -> EventLoopFuture<GetRoomResponse> {
        return client.execute(operation: "GetRoom", path: "/accounts/{accountId}/rooms/{roomId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves details for the specified user ID, such as primary email address, license type, and personal meeting PIN. To retrieve user details with an email address instead of a user ID, use the ListUsers action, and then filter by email address.
    public func getUser(_ input: GetUserRequest) -> EventLoopFuture<GetUserResponse> {
        return client.execute(operation: "GetUser", path: "/accounts/{accountId}/users/{userId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves settings for the specified user ID, such as any associated phone number settings.
    public func getUserSettings(_ input: GetUserSettingsRequest) -> EventLoopFuture<GetUserSettingsResponse> {
        return client.execute(operation: "GetUserSettings", path: "/accounts/{accountId}/users/{userId}/settings", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps, name, outbound host, and encryption requirements.
    public func getVoiceConnector(_ input: GetVoiceConnectorRequest) -> EventLoopFuture<GetVoiceConnectorResponse> {
        return client.execute(operation: "GetVoiceConnector", path: "/voice-connectors/{voiceConnectorId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Gets the emergency calling configuration details for the specified Amazon Chime Voice Connector.
    public func getVoiceConnectorEmergencyCallingConfiguration(_ input: GetVoiceConnectorEmergencyCallingConfigurationRequest) -> EventLoopFuture<GetVoiceConnectorEmergencyCallingConfigurationResponse> {
        return client.execute(operation: "GetVoiceConnectorEmergencyCallingConfiguration", path: "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps, name, and associated VoiceConnectorItems.
    public func getVoiceConnectorGroup(_ input: GetVoiceConnectorGroupRequest) -> EventLoopFuture<GetVoiceConnectorGroupResponse> {
        return client.execute(operation: "GetVoiceConnectorGroup", path: "/voice-connector-groups/{voiceConnectorGroupId}", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
    public func getVoiceConnectorLoggingConfiguration(_ input: GetVoiceConnectorLoggingConfigurationRequest) -> EventLoopFuture<GetVoiceConnectorLoggingConfigurationResponse> {
        return client.execute(operation: "GetVoiceConnectorLoggingConfiguration", path: "/voice-connectors/{voiceConnectorId}/logging-configuration", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves origination setting details for the specified Amazon Chime Voice Connector.
    public func getVoiceConnectorOrigination(_ input: GetVoiceConnectorOriginationRequest) -> EventLoopFuture<GetVoiceConnectorOriginationResponse> {
        return client.execute(operation: "GetVoiceConnectorOrigination", path: "/voice-connectors/{voiceConnectorId}/origination", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Gets the proxy configuration details for the specified Amazon Chime Voice Connector.
    public func getVoiceConnectorProxy(_ input: GetVoiceConnectorProxyRequest) -> EventLoopFuture<GetVoiceConnectorProxyResponse> {
        return client.execute(operation: "GetVoiceConnectorProxy", path: "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data.
    public func getVoiceConnectorStreamingConfiguration(_ input: GetVoiceConnectorStreamingConfigurationRequest) -> EventLoopFuture<GetVoiceConnectorStreamingConfigurationResponse> {
        return client.execute(operation: "GetVoiceConnectorStreamingConfiguration", path: "/voice-connectors/{voiceConnectorId}/streaming-configuration", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves termination setting details for the specified Amazon Chime Voice Connector.
    public func getVoiceConnectorTermination(_ input: GetVoiceConnectorTerminationRequest) -> EventLoopFuture<GetVoiceConnectorTerminationResponse> {
        return client.execute(operation: "GetVoiceConnectorTermination", path: "/voice-connectors/{voiceConnectorId}/termination", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Retrieves information about the last time a SIP OPTIONS ping was received from your SIP infrastructure for the specified Amazon Chime Voice Connector.
    public func getVoiceConnectorTerminationHealth(_ input: GetVoiceConnectorTerminationHealthRequest) -> EventLoopFuture<GetVoiceConnectorTerminationHealthResponse> {
        return client.execute(operation: "GetVoiceConnectorTerminationHealth", path: "/voice-connectors/{voiceConnectorId}/termination/health", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime Team account. Only Team account types are currently supported for this action. 
    public func inviteUsers(_ input: InviteUsersRequest) -> EventLoopFuture<InviteUsersResponse> {
        return client.execute(operation: "InviteUsers", path: "/accounts/{accountId}/users?operation=add", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Lists the Amazon Chime accounts under the administrator's AWS account. You can filter accounts by account name prefix. To find out which Amazon Chime account a user belongs to, you can filter by the user's email address, which returns one account result.
    public func listAccounts(_ input: ListAccountsRequest) -> EventLoopFuture<ListAccountsResponse> {
        return client.execute(operation: "ListAccounts", path: "/accounts", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the tags applied to an Amazon Chime SDK attendee resource.
    public func listAttendeeTags(_ input: ListAttendeeTagsRequest) -> EventLoopFuture<ListAttendeeTagsResponse> {
        return client.execute(operation: "ListAttendeeTags", path: "/meetings/{meetingId}/attendees/{attendeeId}/tags", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.
    public func listAttendees(_ input: ListAttendeesRequest) -> EventLoopFuture<ListAttendeesResponse> {
        return client.execute(operation: "ListAttendees", path: "/meetings/{meetingId}/attendees", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the bots associated with the administrator's Amazon Chime Enterprise account ID.
    public func listBots(_ input: ListBotsRequest) -> EventLoopFuture<ListBotsResponse> {
        return client.execute(operation: "ListBots", path: "/accounts/{accountId}/bots", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the tags applied to an Amazon Chime SDK meeting resource.
    public func listMeetingTags(_ input: ListMeetingTagsRequest) -> EventLoopFuture<ListMeetingTagsResponse> {
        return client.execute(operation: "ListMeetingTags", path: "/meetings/{meetingId}/tags", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists up to 100 active Amazon Chime SDK meetings. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.
    public func listMeetings(_ input: ListMeetingsRequest) -> EventLoopFuture<ListMeetingsResponse> {
        return client.execute(operation: "ListMeetings", path: "/meetings", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the phone number orders for the administrator's Amazon Chime account.
    public func listPhoneNumberOrders(_ input: ListPhoneNumberOrdersRequest) -> EventLoopFuture<ListPhoneNumberOrdersResponse> {
        return client.execute(operation: "ListPhoneNumberOrders", path: "/phone-number-orders", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.
    public func listPhoneNumbers(_ input: ListPhoneNumbersRequest) -> EventLoopFuture<ListPhoneNumbersResponse> {
        return client.execute(operation: "ListPhoneNumbers", path: "/phone-numbers", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the proxy sessions for the specified Amazon Chime Voice Connector.
    public func listProxySessions(_ input: ListProxySessionsRequest) -> EventLoopFuture<ListProxySessionsResponse> {
        return client.execute(operation: "ListProxySessions", path: "/voice-connectors/{voiceConnectorId}/proxy-sessions", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the membership details for the specified room in an Amazon Chime Enterprise account, such as the members' IDs, email addresses, and names.
    public func listRoomMemberships(_ input: ListRoomMembershipsRequest) -> EventLoopFuture<ListRoomMembershipsResponse> {
        return client.execute(operation: "ListRoomMemberships", path: "/accounts/{accountId}/rooms/{roomId}/memberships", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.
    public func listRooms(_ input: ListRoomsRequest) -> EventLoopFuture<ListRoomsResponse> {
        return client.execute(operation: "ListRooms", path: "/accounts/{accountId}/rooms", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the tags applied to an Amazon Chime SDK meeting resource.
    public func listTagsForResource(_ input: ListTagsForResourceRequest) -> EventLoopFuture<ListTagsForResourceResponse> {
        return client.execute(operation: "ListTagsForResource", path: "/tags", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the users that belong to the specified Amazon Chime account. You can specify an email address to list only the user that the email address belongs to.
    public func listUsers(_ input: ListUsersRequest) -> EventLoopFuture<ListUsersResponse> {
        return client.execute(operation: "ListUsers", path: "/accounts/{accountId}/users", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the Amazon Chime Voice Connector groups for the administrator's AWS account.
    public func listVoiceConnectorGroups(_ input: ListVoiceConnectorGroupsRequest) -> EventLoopFuture<ListVoiceConnectorGroupsResponse> {
        return client.execute(operation: "ListVoiceConnectorGroups", path: "/voice-connector-groups", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the SIP credentials for the specified Amazon Chime Voice Connector.
    public func listVoiceConnectorTerminationCredentials(_ input: ListVoiceConnectorTerminationCredentialsRequest) -> EventLoopFuture<ListVoiceConnectorTerminationCredentialsResponse> {
        return client.execute(operation: "ListVoiceConnectorTerminationCredentials", path: "/voice-connectors/{voiceConnectorId}/termination/credentials", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Lists the Amazon Chime Voice Connectors for the administrator's AWS account.
    public func listVoiceConnectors(_ input: ListVoiceConnectorsRequest) -> EventLoopFuture<ListVoiceConnectorsResponse> {
        return client.execute(operation: "ListVoiceConnectors", path: "/voice-connectors", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Logs out the specified user from all of the devices they are currently logged into.
    public func logoutUser(_ input: LogoutUserRequest) -> EventLoopFuture<LogoutUserResponse> {
        return client.execute(operation: "LogoutUser", path: "/accounts/{accountId}/users/{userId}?operation=logout", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Creates an events configuration that allows a bot to receive outgoing events sent by Amazon Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see Bot.
    public func putEventsConfiguration(_ input: PutEventsConfigurationRequest) -> EventLoopFuture<PutEventsConfigurationResponse> {
        return client.execute(operation: "PutEventsConfiguration", path: "/accounts/{accountId}/bots/{botId}/events-configuration", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Puts retention settings for the specified Amazon Chime Enterprise account. We recommend using AWS CloudTrail to monitor usage of this API for your account. For more information, see Logging Amazon Chime API Calls with AWS CloudTrail in the Amazon Chime Administration Guide. To turn off existing retention settings, remove the number of days from the corresponding RetentionDays field in the RetentionSettings object. For more information about retention settings, see Managing Chat Retention Policies in the Amazon Chime Administration Guide.
    public func putRetentionSettings(_ input: PutRetentionSettingsRequest) -> EventLoopFuture<PutRetentionSettingsResponse> {
        return client.execute(operation: "PutRetentionSettings", path: "/accounts/{accountId}/retention-settings", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Puts emergency calling configuration details to the specified Amazon Chime Voice Connector, such as emergency phone numbers and calling countries. Origination and termination settings must be enabled for the Amazon Chime Voice Connector before emergency calling can be configured.
    public func putVoiceConnectorEmergencyCallingConfiguration(_ input: PutVoiceConnectorEmergencyCallingConfigurationRequest) -> EventLoopFuture<PutVoiceConnectorEmergencyCallingConfigurationResponse> {
        return client.execute(operation: "PutVoiceConnectorEmergencyCallingConfiguration", path: "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
    public func putVoiceConnectorLoggingConfiguration(_ input: PutVoiceConnectorLoggingConfigurationRequest) -> EventLoopFuture<PutVoiceConnectorLoggingConfigurationResponse> {
        return client.execute(operation: "PutVoiceConnectorLoggingConfiguration", path: "/voice-connectors/{voiceConnectorId}/logging-configuration", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Adds origination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off origination settings. 
    public func putVoiceConnectorOrigination(_ input: PutVoiceConnectorOriginationRequest) -> EventLoopFuture<PutVoiceConnectorOriginationResponse> {
        return client.execute(operation: "PutVoiceConnectorOrigination", path: "/voice-connectors/{voiceConnectorId}/origination", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Puts the specified proxy configuration to the specified Amazon Chime Voice Connector.
    public func putVoiceConnectorProxy(_ input: PutVoiceConnectorProxyRequest) -> EventLoopFuture<PutVoiceConnectorProxyResponse> {
        return client.execute(operation: "PutVoiceConnectorProxy", path: "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming configuration specifies whether media streaming is enabled for sending to Amazon Kinesis. It also sets the retention period, in hours, for the Amazon Kinesis data.
    public func putVoiceConnectorStreamingConfiguration(_ input: PutVoiceConnectorStreamingConfigurationRequest) -> EventLoopFuture<PutVoiceConnectorStreamingConfigurationResponse> {
        return client.execute(operation: "PutVoiceConnectorStreamingConfiguration", path: "/voice-connectors/{voiceConnectorId}/streaming-configuration", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Adds termination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off termination settings. 
    public func putVoiceConnectorTermination(_ input: PutVoiceConnectorTerminationRequest) -> EventLoopFuture<PutVoiceConnectorTerminationResponse> {
        return client.execute(operation: "PutVoiceConnectorTermination", path: "/voice-connectors/{voiceConnectorId}/termination", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Adds termination SIP credentials for the specified Amazon Chime Voice Connector.
    @discardableResult public func putVoiceConnectorTerminationCredentials(_ input: PutVoiceConnectorTerminationCredentialsRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "PutVoiceConnectorTerminationCredentials", path: "/voice-connectors/{voiceConnectorId}/termination/credentials?operation=put", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Redacts the specified message from the specified Amazon Chime conversation.
    public func redactConversationMessage(_ input: RedactConversationMessageRequest) -> EventLoopFuture<RedactConversationMessageResponse> {
        return client.execute(operation: "RedactConversationMessage", path: "/accounts/{accountId}/conversations/{conversationId}/messages/{messageId}?operation=redact", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Redacts the specified message from the specified Amazon Chime chat room.
    public func redactRoomMessage(_ input: RedactRoomMessageRequest) -> EventLoopFuture<RedactRoomMessageResponse> {
        return client.execute(operation: "RedactRoomMessage", path: "/accounts/{accountId}/rooms/{roomId}/messages/{messageId}?operation=redact", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Regenerates the security token for a bot.
    public func regenerateSecurityToken(_ input: RegenerateSecurityTokenRequest) -> EventLoopFuture<RegenerateSecurityTokenResponse> {
        return client.execute(operation: "RegenerateSecurityToken", path: "/accounts/{accountId}/bots/{botId}?operation=regenerate-security-token", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns the User object with the updated personal meeting PIN.
    public func resetPersonalPIN(_ input: ResetPersonalPINRequest) -> EventLoopFuture<ResetPersonalPINResponse> {
        return client.execute(operation: "ResetPersonalPIN", path: "/accounts/{accountId}/users/{userId}?operation=reset-personal-pin", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Moves a phone number from the Deletion queue back into the phone number Inventory.
    public func restorePhoneNumber(_ input: RestorePhoneNumberRequest) -> EventLoopFuture<RestorePhoneNumberResponse> {
        return client.execute(operation: "RestorePhoneNumber", path: "/phone-numbers/{phoneNumberId}?operation=restore", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Searches phone numbers that can be ordered.
    public func searchAvailablePhoneNumbers(_ input: SearchAvailablePhoneNumbersRequest) -> EventLoopFuture<SearchAvailablePhoneNumbersResponse> {
        return client.execute(operation: "SearchAvailablePhoneNumbers", path: "/search?type=phone-numbers", httpMethod: .GET, input: input, config: self.config, context: self.context)
    }

    ///  Applies the specified tags to the specified Amazon Chime SDK attendee.
    @discardableResult public func tagAttendee(_ input: TagAttendeeRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "TagAttendee", path: "/meetings/{meetingId}/attendees/{attendeeId}/tags?operation=add", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Applies the specified tags to the specified Amazon Chime SDK meeting.
    @discardableResult public func tagMeeting(_ input: TagMeetingRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "TagMeeting", path: "/meetings/{meetingId}/tags?operation=add", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Applies the specified tags to the specified Amazon Chime SDK meeting resource.
    @discardableResult public func tagResource(_ input: TagResourceRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "TagResource", path: "/tags?operation=tag-resource", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Untags the specified tags from the specified Amazon Chime SDK attendee.
    @discardableResult public func untagAttendee(_ input: UntagAttendeeRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "UntagAttendee", path: "/meetings/{meetingId}/attendees/{attendeeId}/tags?operation=delete", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Untags the specified tags from the specified Amazon Chime SDK meeting.
    @discardableResult public func untagMeeting(_ input: UntagMeetingRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "UntagMeeting", path: "/meetings/{meetingId}/tags?operation=delete", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Untags the specified tags from the specified Amazon Chime SDK meeting resource.
    @discardableResult public func untagResource(_ input: UntagResourceRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "UntagResource", path: "/tags?operation=untag-resource", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates account details for the specified Amazon Chime account. Currently, only account name updates are supported for this action.
    public func updateAccount(_ input: UpdateAccountRequest) -> EventLoopFuture<UpdateAccountResponse> {
        return client.execute(operation: "UpdateAccount", path: "/accounts/{accountId}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates the settings for the specified Amazon Chime account. You can update settings for remote control of shared screens, or for the dial-out option. For more information about these settings, see Use the Policies Page in the Amazon Chime Administration Guide.
    public func updateAccountSettings(_ input: UpdateAccountSettingsRequest) -> EventLoopFuture<UpdateAccountSettingsResponse> {
        return client.execute(operation: "UpdateAccountSettings", path: "/accounts/{accountId}/settings", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.
    public func updateBot(_ input: UpdateBotRequest) -> EventLoopFuture<UpdateBotResponse> {
        return client.execute(operation: "UpdateBot", path: "/accounts/{accountId}/bots/{botId}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
    @discardableResult public func updateGlobalSettings(_ input: UpdateGlobalSettingsRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "UpdateGlobalSettings", path: "/settings", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action. For toll-free numbers, you must use the Amazon Chime Voice Connector product type. Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.
    public func updatePhoneNumber(_ input: UpdatePhoneNumberRequest) -> EventLoopFuture<UpdatePhoneNumberResponse> {
        return client.execute(operation: "UpdatePhoneNumber", path: "/phone-numbers/{phoneNumberId}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates the phone number settings for the administrator's AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update.
    @discardableResult public func updatePhoneNumberSettings(_ input: UpdatePhoneNumberSettingsRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "UpdatePhoneNumberSettings", path: "/settings/phone-number", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Updates the specified proxy session details, such as voice or SMS capabilities.
    public func updateProxySession(_ input: UpdateProxySessionRequest) -> EventLoopFuture<UpdateProxySessionResponse> {
        return client.execute(operation: "UpdateProxySession", path: "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.
    public func updateRoom(_ input: UpdateRoomRequest) -> EventLoopFuture<UpdateRoomResponse> {
        return client.execute(operation: "UpdateRoom", path: "/accounts/{accountId}/rooms/{roomId}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates room membership details, such as the member role, for a room in an Amazon Chime Enterprise account. The member role designates whether the member is a chat room administrator or a general chat room member. The member role can be updated only for user IDs.
    public func updateRoomMembership(_ input: UpdateRoomMembershipRequest) -> EventLoopFuture<UpdateRoomMembershipResponse> {
        return client.execute(operation: "UpdateRoomMembership", path: "/accounts/{accountId}/rooms/{roomId}/memberships/{memberId}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates user details for a specified user ID. Currently, only LicenseType updates are supported for this action.
    public func updateUser(_ input: UpdateUserRequest) -> EventLoopFuture<UpdateUserResponse> {
        return client.execute(operation: "UpdateUser", path: "/accounts/{accountId}/users/{userId}", httpMethod: .POST, input: input, config: self.config, context: self.context)
    }

    ///  Updates the settings for the specified user, such as phone number settings.
    @discardableResult public func updateUserSettings(_ input: UpdateUserSettingsRequest) -> EventLoopFuture<Void> {
        return client.execute(operation: "UpdateUserSettings", path: "/accounts/{accountId}/users/{userId}/settings", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Updates details for the specified Amazon Chime Voice Connector.
    public func updateVoiceConnector(_ input: UpdateVoiceConnectorRequest) -> EventLoopFuture<UpdateVoiceConnectorResponse> {
        return client.execute(operation: "UpdateVoiceConnector", path: "/voice-connectors/{voiceConnectorId}", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }

    ///  Updates details for the specified Amazon Chime Voice Connector group, such as the name and Amazon Chime Voice Connector priority ranking.
    public func updateVoiceConnectorGroup(_ input: UpdateVoiceConnectorGroupRequest) -> EventLoopFuture<UpdateVoiceConnectorGroupResponse> {
        return client.execute(operation: "UpdateVoiceConnectorGroup", path: "/voice-connector-groups/{voiceConnectorGroupId}", httpMethod: .PUT, input: input, config: self.config, context: self.context)
    }
}

extension Chime {
    /// internal initialiser used by `withNewContext`
    init(client: AWSClient, config: AWSServiceConfig, context: AWSServiceContext) {
        self.client = client
        self.config = config
        self.context = context
    }
}
