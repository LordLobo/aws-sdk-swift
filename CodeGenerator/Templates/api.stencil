{%include "header.stencil" %}

@_exported import AWSSDKSwiftCore

{% if middlewareFramework %}
import {{ middlewareFramework }}

{% endif %}
/**
Client object for interacting with AWS {{name}} service.

{%if description %}
{{description}}
{% endif %}
*/
public struct {{ name }}: AWSService {

    //MARK: Member variables

    public let client: AWSClient
    public let config: AWSServiceConfig
    public let context: AWSServiceContext

    //MARK: Initialization

    /// Initialize the {{name}} client
    /// - parameters:
    ///     - client: AWSClient used to process requests
{% if regionalized %}
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
{% endif %}
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - timeout: Timeout value for HTTP requests
    public init(
        client: AWSClient,
{% if regionalized %}
        region: AWSSDKSwiftCore.Region? = nil,
{% endif %}
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        timeout: TimeAmount? = nil
    ) {
        self.client = client
        self.config = AWSServiceConfig(
{% if regionalized %}
            region: region,
            partition: region?.partition ?? partition,
{% else %}
            region: nil,
            partition: partition,
{% endif %}
{% if amzTarget %}
            amzTarget: "{{amzTarget}}",
{% endif %}
            service: "{{endpointPrefix}}",
{% if signingName %}
            signingName: "{{signingName}}",
{% endif %}
            serviceProtocol: {{protocol}},
            apiVersion: "{{apiVersion}}",
            endpoint: endpoint{% if serviceEndpoints %},
            serviceEndpoints: [{{ serviceEndpoints|join:", "}}]{% endif %}{% if partitionEndpoints %},
            partitionEndpoints: [{{ partitionEndpoints|join:", "}}]{% endif %}{% if errorTypes %},
            possibleErrorTypes: [{{errorTypes}}.self]{% endif %}{% if middlewareClass %},
            middlewares: [{{middlewareClass}}]{% endif %}
        )
        self.context = .init(timeout: timeout ?? .seconds(20))
    }
    
    /// create copy of service with new context
    public func withNewContext(_ process: (AWSServiceContext) -> AWSServiceContext) -> Self {
        return Self(client: self.client, config: self.config, context: process(self.context))
    }
    
    //MARK: API Calls
{%for op in operations %}

{%for comment in op.comment %}
    ///  {{comment}}
{%endfor %}
{%if op.documentationUrl %}
    ///  {{op.documentationUrl}}
{%endif %}
{%if op.deprecated %}
    @available(*, deprecated, message:"{{op.deprecated}}")
{%endif %}
    {% if not op.outputShape %}@discardableResult {% endif %}public func {{op.funcName}}({% if op.inputShape %}_ input: {{op.inputShape}}{% endif %}) -> EventLoopFuture<{% if op.outputShape %}{{op.outputShape}}{% else %}Void{% endif %}> {
        return client.execute(operation: "{{op.name}}", path: "{{op.path}}", httpMethod: .{{op.httpMethod}}{% if op.inputShape %}, input: input{% endif %}, config: self.config, context: self.context)
    }
{%endfor %}
{%if streamingOperations.count > 0 %}

    //MARK: Streaming API Calls
{%for op in streamingOperations %}

{%for comment in op.comment %}
    ///  {{comment}}
{%endfor %}
{%if op.deprecated %}
    @available(*, deprecated, message:"{{op.deprecated}}")
{%endif %}
    {% if not op.outputShape %}@discardableResult {% endif %}public func {{op.funcName}}({% if op.inputShape %}_ input: {{op.inputShape}}, {% endif %}_ stream: @escaping ({{op.streaming}}, EventLoop)->EventLoopFuture<Void>) -> EventLoopFuture<{% if op.outputShape %}{{op.outputShape}}{% else %}Void{% endif %}> {
        return client.execute(operation: "{{op.name}}", path: "{{op.path}}", httpMethod: .{{op.httpMethod}}{% if op.inputShape %}, input: input{% endif %}, config: self.config, context: self.context, stream: stream)
    }
{%endfor %}
{%endif %}
}

extension {{ name }} {
    /// internal initialiser used by `withNewContext`
    init(client: AWSClient, config: AWSServiceConfig, context: AWSServiceContext) {
        self.client = client
        self.config = config
        self.context = context
    }
}
